#!/usr/bin/env python3
# main.py - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

"""
Telegram Account Manager & Parser
–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–ø–∞–º-–±–ª–æ–∫, –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, –≤–∞–ª–∏–¥–Ω—ã–µ)
- –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
- –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Ä–∞—Å—Å—ã–ª–∫–∞, —Å–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV/JSON —Ñ–æ—Ä–º–∞—Ç—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 2.0
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_dir = os.path.join("data", "logs")
    os.makedirs(log_dir, exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(os.path.join(log_dir, 'app.log')),
            logging.StreamHandler()
        ]
    )

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = ['telethon', 'aiohttp']
    optional_modules = ['tkinter']
    
    missing_required = []
    missing_optional = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_required.append(module)
    
    for module in optional_modules:
        try:
            __import__(module)
        except ImportError:
            missing_optional.append(module)
    
    if missing_required:
        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(missing_required)}\n\n"
        error_msg += "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:\n"
        error_msg += f"pip install {' '.join(missing_required)}"
        print(error_msg)
        return False, False
    
    gui_available = 'tkinter' not in missing_optional
    
    if missing_optional:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(missing_optional)}")
        if 'tkinter' in missing_optional:
            print("GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.")
    
    return True, gui_available

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Account Manager & Parser v2.0")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps_ok, gui_available = check_dependencies()
        if not deps_ok:
            sys.exit(1)
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        if gui_available:
            # –ó–∞–ø—É—Å–∫ GUI –≤–µ—Ä—Å–∏–∏
            try:
                from gui_app import TelegramManagerGUI
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                app = TelegramManagerGUI()
                logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                app.run()
                logger.info("GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            except ImportError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GUI: {e}")
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å GUI: {e}")
                print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
                gui_available = False
        
        if not gui_available:
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            print("\nüñ•Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏")
            print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏")
            print("4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("0. –í—ã—Ö–æ–¥")
            
            while True:
                try:
                    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-4): ").strip()
                    
                    if choice == "0":
                        break
                    elif choice == "1":
                        os.system("python3 test_logic_only.py")
                    elif choice == "2":
                        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                        accounts = storage_manager.list_accounts()
                        print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
                        for acc in accounts[:10]:
                            info = storage_manager.get_account_info(acc)
                            print(f"  {acc}: {'‚úÖ' if info['json_valid'] else '‚ùå'}")
                    elif choice == "3":
                        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...")
                        settings = storage_manager.load_settings()
                        proxies = settings.get('proxies', [])
                        print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
                        for proxy in proxies[:5]:
                            proxy_short = f"{proxy.split(':')[0]}:{proxy.split(':')[1]}"
                            print(f"  {proxy_short}")
                    elif choice == "4":
                        print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                        storage_manager.create_task("test_task_console")
                        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                        
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            print("üëã –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n\n{e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
            root.destroy()
        except:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        sys.exit(1)

if __name__ == "__main__":
    main()