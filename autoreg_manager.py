# autoreg_manager.py

import asyncio
import random
import time
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from telethon import TelegramClient
from telethon.errors import FloodWaitError, PeerFloodError, UserPrivacyRestrictedError
import storage_manager

class AutoregManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self, progress_callback=None):
        self.progress_callback = progress_callback
        self.account_ages = {}  # –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.warmup_stages = {}  # –°—Ç–∞–¥–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
        
    async def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        if self.progress_callback:
            await self.progress_callback(message)
        else:
            print(message)
    
    def detect_account_age(self, session_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
        session_path = os.path.join(storage_manager.SESSIONS_DIR, f"{session_name}.session")
        
        if not os.path.exists(session_path):
            return "unknown"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        creation_time = os.path.getctime(session_path)
        creation_date = datetime.fromtimestamp(creation_time)
        age_days = (datetime.now() - creation_date).days
        
        if age_days < 1:
            return "fresh"  # –°–≤–µ–∂–∏–π (–º–µ–Ω–µ–µ —Å—É—Ç–æ–∫)
        elif age_days < 7:
            return "new"    # –ù–æ–≤—ã–π (–º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏)
        elif age_days < 30:
            return "young"  # –ú–æ–ª–æ–¥–æ–π (–º–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞)
        else:
            return "mature" # –ó—Ä–µ–ª—ã–π (–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞)
    
    def get_autoreg_safety_settings(self, account_age: str, task_type: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        age_settings = {
            "fresh": {  # –ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫ - –û–ß–ï–ù–¨ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                "max_actions_per_day": 5,
                "min_delay": 300,  # 5 –º–∏–Ω—É—Ç
                "max_delay": 600,  # 10 –º–∏–Ω—É—Ç
                "max_workers": 1,
                "warmup_required": True,
                "risk_level": "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
            },
            "new": {    # –ú–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                "max_actions_per_day": 15,
                "min_delay": 180,  # 3 –º–∏–Ω—É—Ç—ã
                "max_delay": 360,  # 6 –º–∏–Ω—É—Ç
                "max_workers": 1,
                "warmup_required": True,
                "risk_level": "üî¥ –í–´–°–û–ö–ò–ô"
            },
            "young": {  # –ú–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞ - —É–º–µ—Ä–µ–Ω–Ω–æ
                "max_actions_per_day": 30,
                "min_delay": 90,   # 1.5 –º–∏–Ω—É—Ç—ã
                "max_delay": 180,  # 3 –º–∏–Ω—É—Ç—ã
                "max_workers": 2,
                "warmup_required": False,
                "risk_level": "üü° –°–†–ï–î–ù–ò–ô"
            },
            "mature": { # –ë–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ - –æ–±—ã—á–Ω–æ
                "max_actions_per_day": 50,
                "min_delay": 30,   # 30 —Å–µ–∫—É–Ω–¥
                "max_delay": 90,   # 1.5 –º–∏–Ω—É—Ç—ã
                "max_workers": 3,
                "warmup_required": False,
                "risk_level": "üü¢ –ù–ò–ó–ö–ò–ô"
            }
        }
        
        base_settings = age_settings.get(account_age, age_settings["fresh"])
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        task_multipliers = {
            "spam_dm": 3.0,           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 3 —Ä–∞–∑–∞
            "spam_dm_existing": 2.0,  # –í 2 —Ä–∞–∑–∞
            "spam_chats": 1.5,        # –í 1.5 —Ä–∞–∑–∞
            "spam_channels": 1.2,     # –í 1.2 —Ä–∞–∑–∞
            "join_chats": 2.0,        # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–∂–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ
            "create_channel": 1.5,    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
            "parse_members": 1.0,     # –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–µ–Ω
            "check_all": 1.0          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞
        }
        
        multiplier = task_multipliers.get(task_type, 1.0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        final_settings = base_settings.copy()
        final_settings["min_delay"] = int(base_settings["min_delay"] * multiplier)
        final_settings["max_delay"] = int(base_settings["max_delay"] * multiplier)
        final_settings["max_actions_per_day"] = int(base_settings["max_actions_per_day"] / multiplier)
        
        return final_settings
    
    async def warmup_account(self, session_name: str, proxy_queue=None) -> bool:
        """–ü—Ä–æ–≥—Ä–µ–≤ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await self.log(f"üî• –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
            json_path = os.path.join(storage_manager.SESSIONS_DIR, f"{session_name}.json")
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            api_id = data.get('api_id') or data.get('app_id')
            api_hash = data.get('api_hash') or data.get('app_hash')
            two_fa = data.get('twoFA')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy_dict = None
            if proxy_queue and not proxy_queue.empty():
                try:
                    proxy_str = proxy_queue.get_nowait()
                    p = proxy_str.split(':')
                    if len(p) == 4:
                        proxy_dict = {
                            'proxy_type': 'socks5',
                            'addr': p[0],
                            'port': int(p[1]),
                            'username': p[2],
                            'password': p[3]
                        }
                    proxy_queue.put_nowait(proxy_str)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                except:
                    pass
            
            client = TelegramClient(
                os.path.join(storage_manager.SESSIONS_DIR, session_name),
                int(api_id),
                api_hash,
                proxy=proxy_dict,
                timeout=30
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                if two_fa:
                    await client.sign_in(password=two_fa)
                else:
                    await self.log(f"‚ùå {session_name}: –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA")
                    return False
            
            # –≠—Ç–∞–ø—ã –ø—Ä–æ–≥—Ä–µ–≤–∞
            warmup_actions = [
                ("üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ", self._warmup_get_me),
                ("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤", self._warmup_get_dialogs),
                ("üîç –ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", self._warmup_search_public),
                ("üìû –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω", self._warmup_update_status),
                ("‚è∞ –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self._warmup_simulate_activity)
            ]
            
            for i, (description, action) in enumerate(warmup_actions, 1):
                await self.log(f"üî• [{i}/{len(warmup_actions)}] {session_name}: {description}")
                
                try:
                    await action(client)
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    delay = random.randint(30, 90)
                    await self.log(f"‚è≥ {session_name}: –ü–∞—É–∑–∞ {delay}—Å...")
                    await asyncio.sleep(delay)
                    
                except Exception as e:
                    await self.log(f"‚ö†Ô∏è {session_name}: –û—à–∏–±–∫–∞ –≤ {description}: {e}")
            
            await client.disconnect()
            
            # –û—Ç–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Ç—ã–π
            self.warmup_stages[session_name] = {
                'warmed_up': True,
                'warmup_date': datetime.now().isoformat(),
                'warmup_actions': len(warmup_actions)
            }
            
            await self.log(f"‚úÖ {session_name}: –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            await self.log(f"‚ùå {session_name}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
            return False
    
    async def _warmup_get_me(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
        me = await client.get_me()
        return me
    
    async def _warmup_get_dialogs(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        dialogs = await client.get_dialogs(limit=10)
        return len(dialogs)
    
    async def _warmup_search_public(self, client):
        """–ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ò—â–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            search_queries = ["news", "crypto", "tech", "music", "sport"]
            query = random.choice(search_queries)
            
            results = await client.get_dialogs(limit=5)
            return len(results)
        except:
            return 0
    
    async def _warmup_update_status(self, client):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await client.get_dialogs(limit=1)
            return True
        except:
            return False
    
    async def _warmup_simulate_activity(self, client):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
            dialogs = await client.get_dialogs(limit=3)
            
            for dialog in dialogs:
                try:
                    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ)
                    messages = await client.get_messages(dialog.entity, limit=1)
                    await asyncio.sleep(random.randint(2, 5))
                except:
                    continue
            
            return True
        except:
            return False
    
    def get_autoreg_recommendations(self, account_age: str) -> Dict:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        recommendations = {
            "fresh": {
                "title": "üÜï –°–í–ï–ñ–ò–ô –ê–ö–ö–ê–£–ù–¢ (–º–µ–Ω–µ–µ —Å—É—Ç–æ–∫)",
                "actions": [
                    "üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ–≤",
                    "‚è∞ –ñ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º",
                    "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–≤—ã–µ –¥–Ω–∏",
                    "üö´ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–≤—ã–µ 2-3 –¥–Ω—è",
                    "üö´ –ù–ï –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ —á–∞—Ç—ã –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞"
                ],
                "max_daily_actions": 3,
                "recommended_delay": "10-20 –º–∏–Ω—É—Ç",
                "risk": "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ª–µ–≥–∫–æ –æ—Ç–ª–µ—Ç–∞–µ—Ç"
            },
            "new": {
                "title": "üå± –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ (–º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏)", 
                "actions": [
                    "üî• –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ–≤ –µ—Å–ª–∏ –Ω–µ –¥–µ–ª–∞–ª–∏",
                    "üì± –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤",
                    "üí¨ –ú–∞–∫—Å–∏–º—É–º 10-15 –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å",
                    "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–∏–Ω–∏–º—É–º 3-5 –º–∏–Ω—É—Ç",
                    "üéØ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–∞–º–∞ –ø–æ –õ–°"
                ],
                "max_daily_actions": 15,
                "recommended_delay": "3-5 –º–∏–Ω—É—Ç",
                "risk": "üî¥ –í–´–°–û–ö–ò–ô - —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"
            },
            "young": {
                "title": "üåø –ú–û–õ–û–î–û–ô –ê–ö–ö–ê–£–ù–¢ (–º–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞)",
                "actions": [
                    "üìà –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    "üí¨ –î–æ 30 –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å",
                    "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã 1-3 –º–∏–Ω—É—Ç—ã",
                    "üéØ –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å–æ —Å–ø–∞–º–æ–º –ø–æ –õ–°",
                    "‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
                ],
                "max_daily_actions": 30,
                "recommended_delay": "1-3 –º–∏–Ω—É—Ç—ã",
                "risk": "üü° –°–†–ï–î–ù–ò–ô - –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"
            },
            "mature": {
                "title": "üå≥ –ó–†–ï–õ–´–ô –ê–ö–ö–ê–£–ù–¢ (–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞)",
                "actions": [
                    "‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ",
                    "üí¨ –î–æ 50-100 –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å",
                    "‚è∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã 30-90 —Å–µ–∫",
                    "üéØ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                    "üìä –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á"
                ],
                "max_daily_actions": 100,
                "recommended_delay": "30-90 —Å–µ–∫—É–Ω–¥",
                "risk": "üü¢ –ù–ò–ó–ö–ò–ô - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
            }
        }
        
        return recommendations.get(account_age, recommendations["fresh"])
    
    async def gentle_join_chats(self, client, chat_list: List[str], session_name: str):
        """–ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        account_age = self.detect_account_age(session_name)
        settings = self.get_autoreg_safety_settings(account_age, "join_chats")
        
        max_joins = min(len(chat_list), settings["max_daily_actions"])
        min_delay = settings["min_delay"]
        max_delay = settings["max_delay"]
        
        await self.log(f"üöÄ {session_name}: –ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ ({account_age}, –º–∞–∫—Å. {max_joins} —á–∞—Ç–æ–≤)")
        
        joined_count = 0
        
        for i, chat_link in enumerate(chat_list[:max_joins]):
            if joined_count >= max_joins:
                break
            
            try:
                await self.log(f"üîó {session_name}: [{i+1}/{max_joins}] –í—Å—Ç—É–ø–∞—é –≤ {chat_link[:30]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å
                if 'joinchat/' in chat_link or '+' in chat_link:
                    invite = chat_link.split('joinchat/')[-1] if 'joinchat/' in chat_link else chat_link.split('+')[-1]
                    await client(ImportChatInviteRequest(invite))
                else:
                    await client(JoinChannelRequest(chat_link))
                
                joined_count += 1
                await self.log(f"‚úÖ {session_name}: –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç")
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                delay = random.randint(min_delay, max_delay)
                await self.log(f"‚è≥ {session_name}: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞ {delay}—Å...")
                await asyncio.sleep(delay)
                
            except PeerFloodError:
                await self.log(f"üö´ {session_name}: PeerFlood - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é")
                break
            except FloodWaitError as e:
                await self.log(f"‚è≥ {session_name}: FloodWait {e.seconds}—Å")
                await asyncio.sleep(e.seconds)
            except UserPrivacyRestrictedError:
                await self.log(f"üîí {session_name}: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è {chat_link}")
                continue
            except Exception as e:
                await self.log(f"‚ùå {session_name}: –û—à–∏–±–∫–∞ —Å {chat_link}: {type(e).__name__}")
                continue
        
        await self.log(f"üèÅ {session_name}: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—Ç—É–ø–∏–ª –≤ {joined_count} —á–∞—Ç–æ–≤")
        return joined_count
    
    async def gentle_spam(self, client, targets: List[Dict], messages: List[str], session_name: str, task_type: str):
        """–ú—è–≥–∫–∏–π —Å–ø–∞–º –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        account_age = self.detect_account_age(session_name)
        settings = self.get_autoreg_safety_settings(account_age, task_type)
        
        max_messages = min(len(targets), settings["max_daily_actions"])
        min_delay = settings["min_delay"]
        max_delay = settings["max_delay"]
        
        await self.log(f"üí¨ {session_name}: –ú—è–≥–∫–∏–π —Å–ø–∞–º ({account_age}, –º–∞–∫—Å. {max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        sent_count = 0
        error_count = 0
        
        for i, target in enumerate(targets[:max_messages]):
            if sent_count >= max_messages or error_count >= 3:
                break
            
            try:
                message = random.choice(messages)
                await client.send_message(target['entity'], message)
                sent_count += 1
                
                await self.log(f"‚úÖ {session_name}: [{sent_count}/{max_messages}] ‚Üí {target['title'][:20]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await asyncio.sleep(3)
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                delay = random.randint(min_delay, max_delay)
                await self.log(f"‚è≥ {session_name}: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞ {delay}—Å...")
                await asyncio.sleep(delay)
                
            except PeerFloodError:
                await self.log(f"üö´ {session_name}: PeerFlood - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é")
                error_count += 5  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                break
            except FloodWaitError as e:
                await self.log(f"‚è≥ {session_name}: FloodWait {e.seconds}—Å")
                await asyncio.sleep(e.seconds)
                error_count += 1
            except Exception as e:
                await self.log(f"‚ùå {session_name}: –û—à–∏–±–∫–∞ ‚Üí {target['title'][:20]}: {type(e).__name__}")
                error_count += 1
                
                if error_count >= 3:
                    await self.log(f"üõë {session_name}: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é")
                    break
        
        await self.log(f"üèÅ {session_name}: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –æ—à–∏–±–æ–∫: {error_count}")
        return sent_count, error_count
    
    def should_warmup_account(self, session_name: str) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
        account_age = self.detect_account_age(session_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ–≤
        if session_name in self.warmup_stages:
            warmup_data = self.warmup_stages[session_name]
            if warmup_data.get('warmed_up', False):
                return False
        
        # –°–≤–µ–∂–∏–µ –∏ –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
        return account_age in ["fresh", "new"]
    
    def get_account_status_for_task(self, session_name: str, task_type: str) -> Tuple[bool, str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        account_age = self.detect_account_age(session_name)
        settings = self.get_autoreg_safety_settings(account_age, task_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤
        needs_warmup = self.should_warmup_account(session_name)
        
        if needs_warmup and task_type in ["spam_dm", "spam_chats", "join_chats"]:
            return False, f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è {account_age} –∞–∫–∫–∞—É–Ω—Ç–∞", settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞
        forbidden_tasks = {
            "fresh": ["spam_dm", "spam_dm_existing", "spam_chats", "join_chats"],
            "new": ["spam_dm"],
        }
        
        if task_type in forbidden_tasks.get(account_age, []):
            return False, f"–ó–∞–¥–∞—á–∞ {task_type} —Å–ª–∏—à–∫–æ–º —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞ –¥–ª—è {account_age} –∞–∫–∫–∞—É–Ω—Ç–∞", settings
        
        return True, f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è {account_age} –∞–∫–∫–∞—É–Ω—Ç–∞", settings

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_autoreg_manager = None

def get_autoreg_manager(progress_callback=None) -> AutoregManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AutoregManager"""
    global _autoreg_manager
    if _autoreg_manager is None:
        _autoreg_manager = AutoregManager(progress_callback)
    return _autoreg_manager