# gui_app.py

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter import scrolledtext
import asyncio
import threading
import os
import json
from datetime import datetime
from typing import Dict, List, Optional
import storage_manager
import telegram_worker
import parser_module
import core_manager
import account_tester
import safety_manager
import proxy_manager

class TelegramManagerGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Telegram Account Manager & Parser")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.configure_dark_theme()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.active_tasks = {}
        self.current_account = None
        self.accounts = []
        self.tasks = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_manager.initialize_storage()
        self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.core_manager = core_manager.get_core_manager(self.log)
        self.safety_manager = safety_manager.get_safety_manager()
        self.proxy_manager = proxy_manager.get_proxy_manager()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def configure_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        self.style.configure('TLabel', background='#2b2b2b', foreground='white')
        self.style.configure('TFrame', background='#2b2b2b')
        self.style.configure('TButton', background='#404040', foreground='white')
        self.style.configure('TEntry', fieldbackground='#404040', foreground='white')
        self.style.configure('TCombobox', fieldbackground='#404040', foreground='white')
        self.style.configure('Treeview', background='#404040', foreground='white', fieldbackground='#404040')
        self.style.configure('Treeview.Heading', background='#505050', foreground='white')
        self.style.configure('TNotebook', background='#2b2b2b')
        self.style.configure('TNotebook.Tab', background='#404040', foreground='white')
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.create_accounts_tab()
        self.create_parser_tab()
        self.create_tasks_tab()
        self.create_settings_tab()
        self.create_logs_tab()
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root, bg='#2b2b2b', fg='white')
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='white')
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏", command=self.load_sessions)
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", command=self.export_settings)
        file_menu.add_command(label="–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", command=self.import_settings)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_closing)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0, bg='#2b2b2b', fg='white')
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", command=self.check_all_accounts)
        tools_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs)
    
    def create_accounts_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        accounts_frame = ttk.Frame(self.notebook)
        self.notebook.add(accounts_frame, text="–ê–∫–∫–∞—É–Ω—Ç—ã")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        left_frame = ttk.Frame(accounts_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        ttk.Label(left_frame, text="–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:").pack(anchor=tk.W, pady=(0, 5))
        
        # Treeview –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        columns = ('–ò–º—è', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–æ–∫—Å–∏')
        self.accounts_tree = ttk.Treeview(left_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.accounts_tree.heading(col, text=col)
            self.accounts_tree.column(col, width=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_scrollbar = ttk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.accounts_tree.yview)
        self.accounts_tree.configure(yscrollcommand=accounts_scrollbar.set)
        
        self.accounts_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        accounts_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.accounts_tree.bind('<<TreeviewSelect>>', self.on_account_select)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º
        right_frame = ttk.Frame(accounts_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        
        ttk.Label(right_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º:").pack(anchor=tk.W, pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        info_frame = ttk.LabelFrame(right_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.account_info_text = tk.Text(info_frame, height=8, width=40, bg='#404040', fg='white', 
                                       font=('Consolas', 10))
        self.account_info_text.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(right_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                  command=self.test_selected_account).pack(fill=tk.X, pady=2)
        ttk.Button(buttons_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                  command=self.check_selected_account).pack(fill=tk.X, pady=2)
        ttk.Button(buttons_frame, text="–°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
                  command=self.change_profile).pack(fill=tk.X, pady=2)
        ttk.Button(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                  command=self.delete_account).pack(fill=tk.X, pady=2)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        load_frame = ttk.LabelFrame(right_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞", padding=10)
        load_frame.pack(fill=tk.X)
        
        ttk.Button(load_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP —Å —Å–µ—Å—Å–∏—è–º–∏", 
                  command=self.load_sessions).pack(fill=tk.X, pady=2)
        ttk.Button(load_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.refresh_accounts).pack(fill=tk.X, pady=2)
    
    def create_parser_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        parser_frame = ttk.Frame(self.notebook)
        self.notebook.add(parser_frame, text="–ü–∞—Ä—Å–µ—Ä")
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        top_frame = ttk.LabelFrame(parser_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=15)
        top_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –°—Ç—Ä–æ–∫–∞ 1: –ê–∫–∫–∞—É–Ω—Ç –∏ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞
        ttk.Label(top_frame, text="–ê–∫–∫–∞—É–Ω—Ç:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.parser_account_var = tk.StringVar()
        self.parser_account_combo = ttk.Combobox(top_frame, textvariable=self.parser_account_var, width=25)
        self.parser_account_combo.grid(row=0, column=1, padx=(0, 15), sticky=tk.W)
        
        ttk.Label(top_frame, text="–¢–∏–ø:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.parse_type_var = tk.StringVar(value="usernames")
        parse_type_combo = ttk.Combobox(top_frame, textvariable=self.parse_type_var, 
                                      values=["usernames", "members", "multiple_usernames", "messages", "dialogs"], 
                                      width=20, state="readonly")
        parse_type_combo.grid(row=0, column=3, sticky=tk.W)
        parse_type_combo.bind('<<ComboboxSelected>>', self.on_parse_type_changed)
        
        # –°—Ç—Ä–æ–∫–∞ 2: –¶–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ (–æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ)
        self.parse_target_label = ttk.Label(top_frame, text="–¶–µ–ª—å:")
        self.parse_target_label.grid(row=1, column=0, sticky=tk.W, pady=(10, 0), padx=(0, 5))
        self.parse_target_var = tk.StringVar()
        self.parse_target_entry = ttk.Entry(top_frame, textvariable=self.parse_target_var, width=60)
        self.parse_target_entry.grid(row=1, column=1, columnspan=3, sticky=tk.W, pady=(10, 0))
        
        # –°—Ç—Ä–æ–∫–∞ 3: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.parse_target_text_label = ttk.Label(top_frame, text="–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:")
        self.parse_target_text = tk.Text(top_frame, height=4, width=60, bg='#404040', fg='white')
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã
        
        # –°—Ç—Ä–æ–∫–∞ 4: –õ–∏–º–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç
        ttk.Label(top_frame, text="–õ–∏–º–∏—Ç:").grid(row=4, column=0, sticky=tk.W, pady=(10, 0), padx=(0, 5))
        self.parse_limit_var = tk.StringVar(value="10000")
        self.parse_limit_entry = ttk.Entry(top_frame, textvariable=self.parse_limit_var, width=10)
        self.parse_limit_entry.grid(row=4, column=1, sticky=tk.W, pady=(10, 0))
        
        ttk.Label(top_frame, text="–§–æ—Ä–º–∞—Ç:").grid(row=4, column=2, sticky=tk.W, pady=(10, 0), padx=(15, 5))
        self.export_format_var = tk.StringVar(value="txt")
        format_combo = ttk.Combobox(top_frame, textvariable=self.export_format_var, 
                                  values=["txt", "csv", "json"], width=10, state="readonly")
        format_combo.grid(row=4, column=3, sticky=tk.W, pady=(10, 0))
        
        # –°—Ç—Ä–æ–∫–∞ 5: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(top_frame)
        buttons_frame.grid(row=5, column=0, columnspan=4, pady=(15, 0), sticky=tk.W)
        
        ttk.Button(buttons_frame, text="üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", 
                  command=self.start_parsing).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.stop_parsing).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞", 
                  command=self.open_export_folder).pack(side=tk.LEFT)
        
        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(parser_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=10)
        progress_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        self.parse_progress = ttk.Progressbar(progress_frame, mode='indeterminate')
        self.parse_progress.pack(fill=tk.X, pady=(0, 10))
        
        self.parse_status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")
        ttk.Label(progress_frame, textvariable=self.parse_status_var).pack(anchor=tk.W)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(parser_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=10)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_tree = ttk.Treeview(results_frame, show='headings', height=15)
        results_scrollbar_y = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_tree.yview)
        results_scrollbar_x = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.results_tree.xview)
        
        self.results_tree.configure(yscrollcommand=results_scrollbar_y.set, xscrollcommand=results_scrollbar_x.set)
        
        self.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        results_scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)
    
    def create_tasks_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á"""
        tasks_frame = ttk.Frame(self.notebook)
        self.notebook.add(tasks_frame, text="–ó–∞–¥–∞—á–∏")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        left_frame = ttk.Frame(tasks_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        ttk.Label(left_frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:").pack(anchor=tk.W, pady=(0, 5))
        
        # Treeview –¥–ª—è –∑–∞–¥–∞—á
        columns = ('–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–°—Ç–∞—Ç—É—Å', '–ê–∫–∫–∞—É–Ω—Ç–æ–≤')
        self.tasks_tree = ttk.Treeview(left_frame, columns=columns, show='headings', height=15)
        
        for col in columns:
            self.tasks_tree.heading(col, text=col)
            self.tasks_tree.column(col, width=120)
        
        tasks_scrollbar = ttk.Scrollbar(left_frame, orient=tk.VERTICAL, command=self.tasks_tree.yview)
        self.tasks_tree.configure(yscrollcommand=tasks_scrollbar.set)
        
        self.tasks_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tasks_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
        right_frame = ttk.Frame(tasks_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        
        ttk.Label(right_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:").pack(anchor=tk.W, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        create_frame = ttk.LabelFrame(right_frame, text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", padding=10)
        create_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(create_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(anchor=tk.W)
        self.task_name_var = tk.StringVar()
        ttk.Entry(create_frame, textvariable=self.task_name_var, width=30).pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(create_frame, text="–¢–∏–ø –∑–∞–¥–∞—á–∏:").pack(anchor=tk.W)
        self.task_type_var = tk.StringVar()
        task_types = [
            "check_all", 
            "change_profile:name", "change_profile:lastname", "change_profile:avatar", "change_profile:bio",
            "change_profile:all",
            "create_channel", "update_channel_design", "join_chats", 
            "spam_chats", "spam_channels", "spam_both", "spam_dm", "spam_dm_existing",
            "set_2fa", "remove_2fa", "clean_account"
        ]
        ttk.Combobox(create_frame, textvariable=self.task_type_var, 
                    values=task_types, width=28, state="readonly").pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(create_frame, text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", 
                  command=self.create_task).pack(fill=tk.X)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π
        manage_frame = ttk.LabelFrame(right_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding=10)
        manage_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(manage_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É", 
                  command=self.start_task).pack(fill=tk.X, pady=2)
        ttk.Button(manage_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", 
                  command=self.stop_task).pack(fill=tk.X, pady=2)
        ttk.Button(manage_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏", 
                  command=self.task_settings).pack(fill=tk.X, pady=2)
        ttk.Button(manage_frame, text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", 
                  command=self.delete_task).pack(fill=tk.X, pady=2)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        ttk.Button(right_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.refresh_tasks).pack(fill=tk.X, pady=(10, 0))
    
    def create_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", padding=10)
        distribution_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(distribution_frame, text="–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ 1 –ø—Ä–æ–∫—Å–∏:").pack(side=tk.LEFT, padx=(0, 10))
        self.accounts_per_proxy_var = tk.StringVar(value="3")
        accounts_per_proxy_spin = tk.Spinbox(distribution_frame, from_=1, to=10, width=5, 
                                           textvariable=self.accounts_per_proxy_var,
                                           command=self.update_proxy_distribution)
        accounts_per_proxy_spin.pack(side=tk.LEFT, padx=(0, 20))
        
        ttk.Button(distribution_frame, text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                  command=self.show_proxy_distribution).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(distribution_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                  command=self.update_proxy_distribution).pack(side=tk.LEFT)
        
        # –ü–∞–Ω–µ–ª—å –ø—Ä–æ–∫—Å–∏
        proxy_frame = ttk.LabelFrame(settings_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏", padding=10)
        proxy_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
        left_proxy_frame = ttk.Frame(proxy_frame)
        left_proxy_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        columns = ('–ü—Ä–æ–∫—Å–∏', '–°—Ç–∞—Ç—É—Å', '–°—Ç—Ä–∞–Ω–∞', '–í—Ä–µ–º—è')
        self.proxy_tree = ttk.Treeview(left_proxy_frame, columns=columns, show='headings', height=12)
        
        for col in columns:
            self.proxy_tree.heading(col, text=col)
            if col == '–ü—Ä–æ–∫—Å–∏':
                self.proxy_tree.column(col, width=200)
            else:
                self.proxy_tree.column(col, width=80)
        
        proxy_tree_scrollbar = ttk.Scrollbar(left_proxy_frame, orient=tk.VERTICAL, command=self.proxy_tree.yview)
        self.proxy_tree.configure(yscrollcommand=proxy_tree_scrollbar.set)
        
        self.proxy_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        proxy_tree_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        right_proxy_frame = ttk.Frame(proxy_frame)
        right_proxy_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        ttk.Label(right_proxy_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:").pack(anchor=tk.W, pady=(0, 10))
        
        ttk.Button(right_proxy_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", 
                  command=self.add_proxy).pack(fill=tk.X, pady=2)
        ttk.Button(right_proxy_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", 
                  command=self.load_proxy_file).pack(fill=tk.X, pady=2)
        ttk.Button(right_proxy_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", 
                  command=self.check_proxies).pack(fill=tk.X, pady=2)
        ttk.Button(right_proxy_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–µ", 
                  command=self.remove_non_working_proxies).pack(fill=tk.X, pady=2)
        ttk.Button(right_proxy_frame, text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", 
                  command=self.delete_selected_proxies).pack(fill=tk.X, pady=2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(right_proxy_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=5)
        stats_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.proxy_stats_text = tk.Text(stats_frame, height=8, width=25, bg='#404040', fg='white', 
                                       font=('Consolas', 9))
        self.proxy_stats_text.pack(fill=tk.BOTH, expand=True)
    
    def create_logs_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="–õ–æ–≥–∏")
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_text = scrolledtext.ScrolledText(
            logs_frame, bg='#1e1e1e', fg='#00ff00', 
            font=('Consolas', 10), wrap=tk.WORD
        )
        self.logs_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        logs_buttons_frame = ttk.Frame(logs_frame)
        logs_buttons_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Button(logs_buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(logs_buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=5)
        ttk.Button(logs_buttons_frame, text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", 
                  command=self.toggle_autoscroll).pack(side=tk.RIGHT)
        
        self.autoscroll_enabled = True
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        self.accounts = storage_manager.list_accounts()
        self.tasks = storage_manager.load_tasks()
        
    def refresh_accounts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self.load_data()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.accounts_tree.get_children():
            self.accounts_tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        statuses = storage_manager.load_account_statuses()
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        for account in self.accounts:
            status = statuses.get(account, 'unknown')
            proxy = "–î–∞" if self.has_proxy() else "–ù–µ—Ç"  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            
            self.accounts_tree.insert('', tk.END, values=(account, status, proxy))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
        self.parser_account_combo['values'] = self.accounts
        
        self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")
    
    def refresh_tasks(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        self.load_data()
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
        for item in self.tasks_tree.get_children():
            self.tasks_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        for task_name, task_data in self.tasks.items():
            task_type = task_data.get('type', '–ù–µ –∑–∞–¥–∞–Ω')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ core_manager
            if self.core_manager.is_task_active(task_name):
                status = 'running'
            else:
                status = task_data.get('status', 'stopped')
            accounts_count = len(task_data.get('accounts', []))
            
            self.tasks_tree.insert('', tk.END, values=(task_name, task_type, status, accounts_count))
        
        self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(self.tasks)}")
    
    def has_proxy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∫—Å–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
        settings = storage_manager.load_settings()
        return len(settings.get('proxies', [])) > 0
    
    def on_account_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        selection = self.accounts_tree.selection()
        if selection:
            item = self.accounts_tree.item(selection[0])
            account_name = item['values'][0]
            self.current_account = account_name
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            self.update_account_info(account_name)
    
    def update_account_info(self, account_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        self.account_info_text.delete(1.0, tk.END)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        account_info = storage_manager.get_account_info(account_name)
        statuses = storage_manager.load_account_statuses()
        status = statuses.get(account_name, 'unknown')
        
        info_text = f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_name}\n"
        info_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        info_text += f"üìÑ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {'‚úÖ' if account_info['has_session'] else '‚ùå'}\n"
        info_text += f"‚öôÔ∏è JSON –∫–æ–Ω—Ñ–∏–≥: {'‚úÖ' if account_info['has_json'] else '‚ùå'}\n"
        
        if account_info['has_json']:
            if account_info['json_valid']:
                info_text += f"‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π\n"
                if account_info['api_id']:
                    info_text += f"üîë API ID: {account_info['api_id']}\n"
                info_text += f"üîê 2FA: {'‚úÖ' if account_info['has_2fa'] else '‚ùå'}\n"
            else:
                info_text += f"‚ùå JSON –æ—à–∏–±–∫–∞: {account_info['json_error']}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
        settings = storage_manager.load_settings()
        proxies_count = len(settings.get('proxies', []))
        info_text += f"üåê –ü—Ä–æ–∫—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {proxies_count}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–∞—Ö
        tasks_using_account = [name for name, data in self.tasks.items() 
                             if account_name in data.get('accounts', [])]
        info_text += f"üéØ –ó–∞–¥–∞—á–∏: {', '.join(tasks_using_account) if tasks_using_account else '–ù–µ—Ç'}\n"
        
        self.account_info_text.insert(1.0, info_text)
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        self.logs_text.insert(tk.END, log_message)
        
        if self.autoscroll_enabled:
            self.logs_text.see(tk.END)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.delete(1.0, tk.END)
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.logs_text.get(1.0, tk.END))
                self.log(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def toggle_autoscroll(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        self.autoscroll_enabled = not self.autoscroll_enabled
        self.log(f"–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.autoscroll_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
    
    def load_sessions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –∏–∑ ZIP —Ñ–∞–π–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å —Å–µ—Å—Å–∏—è–º–∏",
            filetypes=[("ZIP files", "*.zip"), ("All files", "*.*")]
        )
        if filename:
            try:
                self.log(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤: {os.path.basename(filename)}")
                storage_manager.unpack_zip(filename, storage_manager.SESSIONS_DIR)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                self.log("üîç –í–∞–ª–∏–¥–∏—Ä—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")
                accounts = storage_manager.list_accounts()
                
                valid_count = 0
                invalid_count = 0
                missing_json_count = 0
                
                for account in accounts:
                    account_info = storage_manager.get_account_info(account)
                    
                    if not account_info['has_json']:
                        # –°–æ–∑–¥–∞–µ–º JSON –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –±–µ–∑ JSON
                        storage_manager.create_default_json_for_session(account)
                        missing_json_count += 1
                        self.log(f"üìù –°–æ–∑–¥–∞–Ω JSON –¥–ª—è {account}")
                    elif not account_info['json_valid']:
                        self.log(f"‚ö†Ô∏è {account}: {account_info['json_error']}")
                        invalid_count += 1
                    else:
                        valid_count += 1
                
                self.refresh_accounts()
                
                # –û—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ
                report = f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                report += f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {valid_count}\n"
                if missing_json_count > 0:
                    report += f"üìù –°–æ–∑–¥–∞–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {missing_json_count}\n"
                if invalid_count > 0:
                    report += f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {invalid_count}\n"
                
                self.log(report)
                
                if invalid_count > 0:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                         f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {valid_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
                                         f"{invalid_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –æ—à–∏–±–∫–∏ –≤ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
                                         "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
                else:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {valid_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏–∏: {e}")
    
    def check_selected_account(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.current_account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        self.log(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞: {self.current_account}")
        self.core_manager.check_account_async(self.current_account)
    
    def test_selected_account(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.current_account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        self.log(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {self.current_account}")
        
        def test_account():
            async def _test():
                try:
                    async def progress_callback(text):
                        self.log(text)
                    
                    result = await account_tester.test_account_connection(
                        self.current_account, progress_callback
                    )
                    
                    if result['success']:
                        user_info = result.get('user_info', {})
                        proxy_info = f" —á–µ—Ä–µ–∑ {result['proxy_used']}" if result['proxy_used'] else ""
                        self.log(f"‚úÖ {self.current_account}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ{proxy_info} ({result['connection_time']}—Å)")
                        
                        if user_info:
                            name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
                            self.log(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (@{user_info.get('username', '–±–µ–∑_username')})")
                            self.log(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', '—Å–∫—Ä—ã—Ç')}")
                    else:
                        self.log(f"‚ùå {self.current_account}: {result['error']}")
                        
                except Exception as e:
                    self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ event loop
            future = self.core_manager.run_async_task(_test())
            if future:
                future.result()
        
        thread = threading.Thread(target=test_account)
        thread.start()
    
    def check_all_accounts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if not self.accounts:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤?\n\n"
                                   "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        if not result:
            return
        
        self.log("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        def test_all():
            async def _test_all():
                try:
                    async def progress_callback(text):
                        self.log(text)
                    
                    results = await account_tester.test_all_accounts(progress_callback)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    statuses = storage_manager.load_account_statuses()
                    
                    for result in results:
                        session_name = result['session_name']
                        if result['success']:
                            statuses[session_name] = 'valid'
                        else:
                            if '–∑–∞–±–∞–Ω–µ–Ω' in result['error'].lower():
                                statuses[session_name] = 'invalid'
                            elif '2fa' in result['error'].lower():
                                statuses[session_name] = 'unknown'
                            else:
                                statuses[session_name] = 'invalid'
                    
                    storage_manager.save_account_statuses(statuses)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self.root.after(0, self.refresh_accounts)
                    
                except Exception as e:
                    self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            future = self.core_manager.run_async_task(_test_all())
            if future:
                future.result()
        
        thread = threading.Thread(target=test_all)
        thread.start()
    
    def change_profile(self):
        """–°–º–µ–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.current_account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç")
            return
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–º–µ–Ω—É –ø—Ä–æ—Ñ–∏–ª—è
    
    def delete_account(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.current_account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {self.current_account}?")
        if result:
            if storage_manager.delete_account(self.current_account):
                self.log(f"–ê–∫–∫–∞—É–Ω—Ç {self.current_account} —É–¥–∞–ª–µ–Ω")
                self.refresh_accounts()
                self.current_account = None
                self.account_info_text.delete(1.0, tk.END)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    
    def start_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        account = self.parser_account_var.get()
        parse_type = self.parse_type_var.get()
        export_format = self.export_format_var.get()
        
        if not account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if parse_type == "multiple_usernames":
            target = self.parse_target_text.get(1.0, tk.END).strip()
            if not target or target == "@chat1\n@chat2\nhttps://t.me/chat3\n...":
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return
        else:
            target = self.parse_target_var.get().strip()
            if not target:
                if parse_type != "dialogs":  # –î–ª—è dialogs —Ü–µ–ª—å –Ω–µ –Ω—É–∂–Ω–∞
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞")
                    return
                else:
                    target = "dialogs"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è dialogs
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        limit_str = self.parse_limit_var.get()
        try:
            limit = int(limit_str)
            if limit <= 0:
                raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if parse_type == "multiple_usernames":
            chat_count = len([line for line in target.split('\n') if line.strip()])
            self.log(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∏–∑ {chat_count} —á–∞—Ç–æ–≤ (–∞–∫–∫–∞—É–Ω—Ç: {account})")
        else:
            self.log(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥: {parse_type} –∏–∑ {target} (–∞–∫–∫–∞—É–Ω—Ç: {account})")
        
        self.parse_progress.start()
        self.parse_status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥...")
        
        # –û–ø—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        options = {
            'limit': limit,
            'export_format': export_format
        }
        
        # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ —á–∞—Ç
        if parse_type == "multiple_usernames":
            options['limit_per_chat'] = limit
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def on_parse_complete():
            self.parse_progress.stop()
            self.parse_status_var.set("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            self.refresh_export_files()
        
        thread = self.core_manager.start_parsing_async(account, parse_type, target, options)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def monitor_parsing():
            thread.join()
            self.root.after(0, on_parse_complete)
        
        threading.Thread(target=monitor_parsing, daemon=True).start()
    
    def on_parse_type_changed(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        parse_type = self.parse_type_var.get()
        
        if parse_type == "multiple_usernames":
            # –°–∫—Ä—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            self.parse_target_entry.grid_remove()
            self.parse_target_text_label.grid(row=2, column=0, sticky=tk.NW, pady=(10, 0), padx=(0, 5))
            self.parse_target_text.grid(row=2, column=1, columnspan=3, sticky=tk.W, pady=(10, 0))
            
            self.parse_target_label.config(text="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥:")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.parse_target_text.delete(1.0, tk.END)
            self.parse_target_text.insert(1.0, "@chat1\n@chat2\nhttps://t.me/chat3\nt.me/joinchat/abc123")
            self.parse_limit_var.set("5000")
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ
            self.parse_target_text_label.grid_remove()
            self.parse_target_text.grid_remove()
            self.parse_target_entry.grid()
            
            if parse_type == "usernames":
                self.parse_target_label.config(text="–ß–∞—Ç/–∫–∞–Ω–∞–ª:")
                self.parse_limit_var.set("10000")
                self.parse_target_var.set("@example_chat")
            elif parse_type == "members":
                self.parse_target_label.config(text="–ß–∞—Ç/–∫–∞–Ω–∞–ª:")
                self.parse_limit_var.set("10000")
                self.parse_target_var.set("@example_chat")
            elif parse_type == "messages":
                self.parse_target_label.config(text="–ß–∞—Ç:")
                self.parse_limit_var.set("1000")
                self.parse_target_var.set("@example_chat")
            elif parse_type == "dialogs":
                self.parse_target_label.config(text="–î–∏–∞–ª–æ–≥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:")
                self.parse_limit_var.set("1000")
                self.parse_target_var.set("(–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.parse_progress.stop()
        self.parse_status_var.set("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.log("üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def open_export_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        import subprocess
        import platform
        
        export_dir = os.path.join(storage_manager.DATA_DIR, "exports")
        os.makedirs(export_dir, exist_ok=True)
        
        try:
            if platform.system() == "Windows":
                subprocess.run(["explorer", export_dir])
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", export_dir])
            else:  # Linux
                subprocess.run(["xdg-open", export_dir])
            
            self.log(f"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {export_dir}")
        except Exception as e:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
            messagebox.showinfo("–ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º", f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:\n{export_dir}")
    
    def create_task(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task_name = self.task_name_var.get().strip()
        task_type = self.task_type_var.get()
        
        if not task_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            return
        
        if not task_type:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏")
            return
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–ø–∞–º–∞ –ø–æ –õ–°
        if task_type in ['spam_dm', 'spam_dm_existing']:
            warning_msg = ("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í–´–°–û–ö–ò–ô –†–ò–°–ö –ë–õ–û–ö–ò–†–û–í–ö–ò –ê–ö–ö–ê–£–ù–¢–û–í!\n\n"
                         "–°–ø–∞–º –ø–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:\n"
                         "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                         "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –±–∞–Ω—É\n"
                         "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                         "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
                         "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (60-120 —Å–µ–∫)\n"
                         "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 1-2 –∞–∫–∫–∞—É–Ω—Ç–∞—Ö\n"
                         "‚Ä¢ –ò–º–µ—Ç—å –∑–∞–ø–∞—Å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n\n"
                         "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏?")
            
            result = messagebox.askyesno("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –†–ò–°–ö–ê–•", warning_msg)
            if not result:
                return
        
        if storage_manager.create_task(task_name):
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            tasks = storage_manager.load_tasks()
            tasks[task_name]['type'] = task_type
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ø–∞–º–∞ –ø–æ –õ–°
            if task_type in ['spam_dm', 'spam_dm_existing']:
                tasks[task_name]['settings']['dm_spam_warning_accepted'] = True
                tasks[task_name]['settings']['spam_delay_min'] = 60
                tasks[task_name]['settings']['spam_delay_max'] = 120
                tasks[task_name]['settings']['use_existing_dialogs_only'] = (task_type == 'spam_dm_existing')
            
            storage_manager.save_tasks(tasks)
            
            self.log(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task_name} ({task_type})")
            self.refresh_tasks()
            self.task_name_var.set("")
            self.task_type_var.set("")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def start_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        selection = self.tasks_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return
        
        item = self.tasks_tree.item(selection[0])
        task_name = item['values'][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if self.core_manager.is_task_active(task_name):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_data = storage_manager.get_task(task_name)
        if not task_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        is_safe, safety_message = self.safety_manager.validate_task_safety(task_name, task_data)
        
        if not is_safe:
            messagebox.showerror("–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
                               f"–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞:\n\n{safety_message}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–¥–∞—á
        task_type = task_data.get('type', '')
        if task_type in ['spam_dm', 'spam_dm_existing', 'spam_chats', 'spam_channels', 'spam_both']:
            recommendations = self.safety_manager.get_recommended_settings(task_type)
            warning = recommendations.get('warning', '')
            
            confirm_msg = f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {task_name}\n"
            confirm_msg += f"–¢–∏–ø: {task_type}\n"
            confirm_msg += f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(task_data.get('accounts', []))}\n\n"
            confirm_msg += f"{warning}\n\n"
            confirm_msg += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞", confirm_msg)
            if not result:
                return
        
        self.log(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É: {task_name}")
        self.log(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞: {safety_message}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        accounts = task_data.get('accounts', [])
        if accounts:
            self.proxy_manager.create_proxy_queues(accounts)
        
        self.core_manager.execute_task_async(task_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.refresh_tasks)
    
    def stop_task(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏"""
        selection = self.tasks_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        
        item = self.tasks_tree.item(selection[0])
        task_name = item['values'][0]
        
        if not self.core_manager.is_task_active(task_name):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        self.log(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–¥–∞—á—É: {task_name}")
        self.core_manager.stop_task(task_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.refresh_tasks)
    
    def task_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏"""
        selection = self.tasks_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É")
            return
        
        item = self.tasks_tree.item(selection[0])
        task_name = item['values'][0]
        
        self.open_task_settings_window(task_name)
    
    def open_task_settings_window(self, task_name):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–¥–∞—á–∏"""
        task_data = storage_manager.get_task(task_name)
        if not task_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_window = tk.Toplevel(self.root)
        settings_window.title(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏: {task_name}")
        settings_window.geometry("600x500")
        settings_window.configure(bg='#2b2b2b')
        settings_window.transient(self.root)
        settings_window.grab_set()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(settings_window, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ", padding=10)
        info_frame.pack(fill=tk.X, padx=10, pady=10)
        
        task_type = task_data.get('type', '–ù–µ –∑–∞–¥–∞–Ω')
        task_settings = task_data.get('settings', {})
        
        info_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}\n"
        info_text += f"–¢–∏–ø: {task_type}\n"
        info_text += f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(task_data.get('accounts', []))}"
        
        ttk.Label(info_frame, text=info_text).pack(anchor=tk.W)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        recommendations = self.safety_manager.get_recommended_settings(task_type)
        if recommendations:
            safety_frame = ttk.LabelFrame(settings_window, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", padding=10)
            safety_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
            
            safety_text = f"–ú–∞–∫—Å. –≤–æ—Ä–∫–µ—Ä–æ–≤: {recommendations.get('max_workers', 5)}\n"
            safety_text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {recommendations.get('delay_min', 30)}-{recommendations.get('delay_max', 90)} —Å–µ–∫\n"
            safety_text += f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {recommendations.get('daily_limit', 50)}\n\n"
            safety_text += f"{recommendations.get('warning', '')}"
            
            safety_label = ttk.Label(safety_frame, text=safety_text, wraplength=550)
            safety_label.pack(anchor=tk.W)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(settings_window, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        settings_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –í–æ—Ä–∫–µ—Ä—ã
        ttk.Label(settings_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        workers_var = tk.StringVar(value=str(task_settings.get('concurrent_workers', 5)))
        workers_entry = ttk.Entry(settings_frame, textvariable=workers_var, width=10)
        workers_entry.grid(row=0, column=1, sticky=tk.W)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª
        ttk.Label(settings_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω-–º–∞–∫—Å):").grid(row=1, column=0, sticky=tk.W, pady=(10, 0), padx=(0, 10))
        interval = task_settings.get('broadcast_interval', [30, 90])
        interval_var = tk.StringVar(value=f"{interval[0]}-{interval[1]}")
        interval_entry = ttk.Entry(settings_frame, textvariable=interval_var, width=15)
        interval_entry.grid(row=1, column=1, sticky=tk.W, pady=(10, 0))
        
        # 2FA –ø–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å 2FA:").grid(row=2, column=0, sticky=tk.W, pady=(10, 0), padx=(0, 10))
        twofa_var = tk.StringVar(value=task_settings.get('two_fa_password', ''))
        twofa_entry = ttk.Entry(settings_frame, textvariable=twofa_var, width=20, show='*')
        twofa_entry.grid(row=2, column=1, sticky=tk.W, pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(settings_window)
        buttons_frame.pack(fill=tk.X, padx=10, pady=10)
        
        def save_settings():
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                workers = int(workers_var.get())
                interval_str = interval_var.get()
                min_val, max_val = map(int, interval_str.split('-'))
                
                tasks = storage_manager.load_tasks()
                if task_name in tasks:
                    tasks[task_name]['settings']['concurrent_workers'] = workers
                    tasks[task_name]['settings']['broadcast_interval'] = [min_val, max_val]
                    tasks[task_name]['settings']['two_fa_password'] = twofa_var.get()
                    storage_manager.save_tasks(tasks)
                    
                    self.log(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏ {task_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                    self.refresh_tasks()
                    settings_window.destroy()
                
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=settings_window.destroy).pack(side=tk.LEFT)
    
    def delete_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        selection = self.tasks_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item = self.tasks_tree.item(selection[0])
        task_name = item['values'][0]
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {task_name}?")
        if result:
            if storage_manager.delete_task(task_name):
                self.log(f"–ó–∞–¥–∞—á–∞ {task_name} —É–¥–∞–ª–µ–Ω–∞")
                self.refresh_tasks()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    
    def add_proxy(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        # TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        pass
    
    def load_proxy_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    proxies = [line.strip() for line in f if line.strip()]
                
                settings = storage_manager.load_settings()
                settings.setdefault('proxies', []).extend(proxies)
                settings['proxies'] = sorted(list(set(settings['proxies'])))
                storage_manager.save_settings(settings)
                
                self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
                self.refresh_proxy_list()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏: {e}")
    
    def refresh_proxy_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.proxy_tree.get_children():
            self.proxy_tree.delete(item)
        
        settings = storage_manager.load_settings()
        proxies = settings.get('proxies', [])
        proxy_statuses = settings.get('proxy_statuses', {})
        
        for proxy in proxies:
            status_info = proxy_statuses.get(proxy, {})
            status = status_info.get('status', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω')
            country = status_info.get('country', 'N/A')
            response_time = status_info.get('response_time', 0)
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            tags = []
            if status == 'working':
                tags.append('working')
            elif status == 'not_working':
                tags.append('not_working')
            
            time_str = f"{response_time}s" if response_time > 0 else "N/A"
            
            self.proxy_tree.insert('', tk.END, values=(proxy, status, country, time_str), tags=tags)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        self.proxy_tree.tag_configure('working', background='#2d5a2d')
        self.proxy_tree.tag_configure('not_working', background='#5a2d2d')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_proxy_stats()
    
    def update_proxy_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        stats = self.proxy_manager.get_proxy_statistics()
        
        stats_text = f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats['total_proxies']}\n"
        stats_text += f"‚úÖ –†–∞–±–æ—á–∏—Ö: {stats['working_proxies']}\n"
        stats_text += f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: {stats['not_working_proxies']}\n"
        stats_text += f"‚ùî –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats['untested_proxies']}\n\n"
        stats_text += f"‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–∫—Å–∏: {stats['accounts_per_proxy']}\n\n"
        
        if stats['distribution']:
            stats_text += "üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
            for proxy, accounts in list(stats['distribution'].items())[:3]:
                proxy_short = f"{proxy.split(':')[0]}:{proxy.split(':')[1]}"
                stats_text += f"{proxy_short}: {len(accounts)} –∞–∫–∫.\n"
            if len(stats['distribution']) > 3:
                stats_text += f"... –∏ –µ—â–µ {len(stats['distribution']) - 3}\n"
        
        self.proxy_stats_text.delete(1.0, tk.END)
        self.proxy_stats_text.insert(1.0, stats_text)
    
    def update_proxy_distribution(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∫—Å–∏"""
        try:
            accounts_per_proxy = int(self.accounts_per_proxy_var.get())
            self.proxy_manager.set_accounts_per_proxy(accounts_per_proxy)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            accounts = storage_manager.list_accounts()
            if accounts:
                proxy_queues = self.proxy_manager.create_proxy_queues(accounts)
                self.log(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {accounts_per_proxy} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–∫—Å–∏")
                self.update_proxy_stats()
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")
    
    def show_proxy_distribution(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        stats = self.proxy_manager.get_proxy_statistics()
        
        if not stats['distribution']:
            messagebox.showinfo("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∫—Å–∏")
            return
        
        distribution_text = "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∫—Å–∏:\n\n"
        
        for proxy, accounts in stats['distribution'].items():
            proxy_short = f"{proxy.split(':')[0]}:{proxy.split(':')[1]}"
            distribution_text += f"üåê {proxy_short}:\n"
            for account in accounts:
                distribution_text += f"  ‚Ä¢ {account}\n"
            distribution_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        distribution_window = tk.Toplevel(self.root)
        distribution_window.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
        distribution_window.geometry("500x400")
        distribution_window.configure(bg='#2b2b2b')
        
        text_widget = scrolledtext.ScrolledText(distribution_window, bg='#404040', fg='white', 
                                              font=('Consolas', 10), wrap=tk.WORD)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_widget.insert(1.0, distribution_text)
        text_widget.config(state=tk.DISABLED)
    
    def add_proxy(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –≤—Ä—É—á–Ω—É—é"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
        dialog.geometry("400x200")
        dialog.configure(bg='#2b2b2b')
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="–§–æ—Ä–º–∞—Ç: ip:port:username:password").pack(pady=10)
        
        entry_var = tk.StringVar()
        entry = ttk.Entry(dialog, textvariable=entry_var, width=40)
        entry.pack(pady=10)
        entry.focus()
        
        def add_proxy_action():
            proxy_str = entry_var.get().strip()
            if not proxy_str:
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
            parts = proxy_str.split(':')
            if len(parts) != 4:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏")
                return
            
            try:
                int(parts[1])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
            settings = storage_manager.load_settings()
            if proxy_str not in settings.get('proxies', []):
                settings.setdefault('proxies', []).append(proxy_str)
                storage_manager.save_settings(settings)
                self.log(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–∫—Å–∏: {parts[0]}:{parts[1]}")
                self.refresh_proxy_list()
                dialog.destroy()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–¢–∞–∫–æ–π –ø—Ä–æ–∫—Å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        ttk.Button(dialog, text="–î–æ–±–∞–≤–∏—Ç—å", command=add_proxy_action).pack(pady=10)
        ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        entry.bind('<Return>', lambda e: add_proxy_action())
    
    def remove_non_working_proxies(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        removed_count = self.proxy_manager.remove_non_working_proxies()
        
        if removed_count > 0:
            self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")
            self.refresh_proxy_list()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def delete_selected_proxies(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        selection = self.proxy_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        proxies_to_delete = []
        for item in selection:
            values = self.proxy_tree.item(item)['values']
            proxies_to_delete.append(values[0])
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–£–¥–∞–ª–∏—Ç—å {len(proxies_to_delete)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏?")
        if result:
            settings = storage_manager.load_settings()
            for proxy in proxies_to_delete:
                if proxy in settings.get('proxies', []):
                    settings['proxies'].remove(proxy)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if proxy in settings.get('proxy_statuses', {}):
                    del settings['proxy_statuses'][proxy]
            
            storage_manager.save_settings(settings)
            self.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(proxies_to_delete)} –ø—Ä–æ–∫—Å–∏")
            self.refresh_proxy_list()
    
    def refresh_export_files(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            export_files = storage_manager.get_export_files()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
            for item in self.results_tree.get_children():
                self.results_tree.delete(item)
            
            if export_files:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
                self.results_tree['columns'] = ('–§–∞–π–ª', '–†–∞–∑–º–µ—Ä', '–î–∞—Ç–∞')
                for col in self.results_tree['columns']:
                    self.results_tree.heading(col, text=col)
                    self.results_tree.column(col, width=150)
                
                for file_info in export_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤
                    size_mb = round(file_info['size'] / 1024 / 1024, 2)
                    date_str = datetime.fromtimestamp(file_info['modified']).strftime("%Y-%m-%d %H:%M")
                    
                    self.results_tree.insert('', tk.END, values=(
                        file_info['filename'],
                        f"{size_mb} MB",
                        date_str
                    ))
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def check_proxies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ProxyManager"""
        settings = storage_manager.load_settings()
        proxies = settings.get('proxies', [])
        
        if not proxies:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {len(proxies)} –ø—Ä–æ–∫—Å–∏?\n\n"
                                   "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        if not result:
            return
        
        self.log(f"üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(proxies)} –ø—Ä–æ–∫—Å–∏...")
        
        def check_all_proxies():
            async def _check_proxies():
                try:
                    async def progress_callback(msg):
                        await self._async_log(msg)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π ProxyManager
                    results = await self.proxy_manager.test_all_proxies(progress_callback)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self.root.after(0, self.refresh_proxy_list)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    working_count = len(results['working'])
                    not_working_count = len(results['not_working'])
                    
                    result_msg = f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
                    result_msg += f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {working_count}\n"
                    result_msg += f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {not_working_count}\n\n"
                    
                    if not_working_count > 0:
                        result_msg += "–£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏?"
                        self.root.after(0, lambda: self._show_proxy_results(result_msg, not_working_count > 0))
                    else:
                        self.root.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result_msg))
                    
                except Exception as e:
                    await self._async_log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            
            future = self.core_manager.run_async_task(_check_proxies())
            if future:
                future.result()
        
        thread = threading.Thread(target=check_all_proxies)
        thread.start()
    
    def _show_proxy_results(self, message, offer_delete):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        if offer_delete:
            result = messagebox.askyesno("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", message)
            if result:
                self.remove_non_working_proxies()
        else:
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", message)
    
    async def _async_log(self, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.root.after(0, lambda: self.log(message))
    
    def delete_proxy(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        pass
    
    def export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            try:
                settings = storage_manager.load_settings()
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=2)
                self.log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                storage_manager.save_settings(settings)
                self.log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑: {filename}")
                self.refresh_accounts()
                self.refresh_tasks()
                self.refresh_proxy_list()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        active_tasks = self.core_manager.get_active_tasks()
        if active_tasks:
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                       f"–ï—Å—Ç—å {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –∏ –≤—ã–π—Ç–∏?")
            if not result:
                return
            
            for task_name in active_tasks:
                self.core_manager.stop_task(task_name)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.root.after(2000, self._force_close)
        else:
            self._force_close()
    
    def _force_close(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.core_manager.shutdown()
        self.root.quit()
        self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.refresh_accounts()
        self.refresh_tasks()
        self.refresh_proxy_list()
        self.refresh_export_files()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
        self.on_parse_type_changed()
        
        self.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")
        self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(self.tasks)}")
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.root.mainloop()

if __name__ == "__main__":
    app = TelegramManagerGUI()
    app.run()