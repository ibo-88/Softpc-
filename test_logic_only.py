# test_logic_only.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

import asyncio
import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import storage_manager

def test_storage_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ storage_manager...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    storage_manager.initialize_storage()
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    result = storage_manager.create_task("test_task_1")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {result}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task_data = storage_manager.get_task("test_task_1")
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_data is not None}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = storage_manager.list_accounts()
    print(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)} –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = storage_manager.load_settings()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ JSON –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    result = storage_manager.create_default_json_for_session("test_account", 123, "test_hash")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ JSON: {result}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    is_valid, error = storage_manager.validate_json_account("test_account")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è JSON: {is_valid} ({error})")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    storage_manager.delete_task("test_task_1")
    test_session = os.path.join(storage_manager.SESSIONS_DIR, "test_account.session")
    test_json = os.path.join(storage_manager.SESSIONS_DIR, "test_account.json")
    if os.path.exists(test_session):
        os.remove(test_session)
    if os.path.exists(test_json):
        os.remove(test_json)
    
    return True

def test_safety_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockSafetyManager:
        def __init__(self):
            self.account_activity = {}
            self.spam_statistics = {}
            self.blocked_accounts = set()
        
        def get_safe_delay(self, task_type, account_name):
            delays = {
                'spam_dm': (120, 300),
                'spam_chats': (30, 90),
                'spam_channels': (45, 120)
            }
            min_delay, max_delay = delays.get(task_type, (30, 90))
            return min_delay  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
        
        def get_recommended_settings(self, task_type):
            recommendations = {
                'spam_dm': {
                    'max_workers': 1,
                    'delay_min': 120,
                    'delay_max': 300,
                    'warning': 'üö® –í–´–°–û–ö–ò–ô –†–ò–°–ö!'
                },
                'spam_chats': {
                    'max_workers': 3,
                    'delay_min': 30,
                    'delay_max': 90,
                    'warning': '‚úÖ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ'
                }
            }
            return recommendations.get(task_type, {})
    
    safety_mgr = MockSafetyManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫
    delay_dm = safety_mgr.get_safe_delay('spam_dm', 'test_account')
    delay_chats = safety_mgr.get_safe_delay('spam_chats', 'test_account')
    
    print(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –õ–°: {delay_dm}s")
    print(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á–∞—Ç–æ–≤: {delay_chats}s")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    rec_dm = safety_mgr.get_recommended_settings('spam_dm')
    rec_chats = safety_mgr.get_recommended_settings('spam_chats')
    
    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –õ–°: {rec_dm}")
    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–∞—Ç—ã: {rec_chats}")
    
    return True

def test_proxy_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–∫—Å–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_proxies = [
        "1.2.3.4:1080:user1:pass1",
        "5.6.7.8:1080:user2:pass2", 
        "9.10.11.12:1080:user3:pass3"
    ]
    
    test_accounts = ["account1", "account2", "account3", "account4", "account5"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏
    settings = storage_manager.load_settings()
    settings['proxies'] = test_proxies
    storage_manager.save_settings(settings)
    
    class MockProxyManager:
        def __init__(self):
            self.accounts_per_proxy = 3
        
        def create_proxy_queues(self, accounts):
            """–°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –ø—Ä–æ–∫—Å–∏"""
            distribution = {}
            for i, account in enumerate(accounts):
                proxy_index = (i // self.accounts_per_proxy) % len(test_proxies)
                proxy = test_proxies[proxy_index]
                if proxy not in distribution:
                    distribution[proxy] = []
                distribution[proxy].append(account)
            return distribution
    
    proxy_mgr = MockProxyManager()
    distribution = proxy_mgr.create_proxy_queues(test_accounts)
    
    print("‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:")
    for proxy, accounts in distribution.items():
        proxy_short = f"{proxy.split(':')[0]}:{proxy.split(':')[1]}"
        print(f"  {proxy_short}: {accounts}")
    
    return True

def test_file_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    test_task = "file_test_task"
    storage_manager.create_task(test_task)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    messages_path = storage_manager.get_task_file_path(test_task, 'messages')
    print(f"‚úÖ –ü—É—Ç—å –∫ messages.txt: {messages_path}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if messages_path:
        with open(messages_path, 'w', encoding='utf-8') as f:
            f.write("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 1\n---\n–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 2")
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ
        messages = storage_manager.read_task_multiline_messages(test_task, 'messages')
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = storage_manager.get_task_stats(test_task)
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á–∏: {stats}")
    
    # –û—á–∏—Å—Ç–∫–∞
    storage_manager.delete_task(test_task)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò TELEGRAM MANAGER")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        success = True
        success &= test_storage_manager()
        success &= test_safety_logic()
        success &= test_proxy_logic()
        success &= test_file_operations()
        
        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
            print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–∫—Å–∏")
            print("‚úÖ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
            
            print("\nüöÄ –ü–†–û–ì–†–ê–ú–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
            print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ GUI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("  python3 main.py")
            
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            return False
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)