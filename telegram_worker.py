# telegram_worker.py

import asyncio
import os
import json
import random
import re
import string
from telethon import TelegramClient, events
from telethon.tl import functions
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon.tl.functions.account import UpdateProfileRequest, UpdatePersonalChannelRequest
from telethon.tl.functions.channels import CreateChannelRequest, UpdateUsernameRequest, EditPhotoRequest, JoinChannelRequest, EditAboutRequest
from telethon.tl.functions.messages import SendMessageRequest, ForwardMessagesRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.errors import SessionPasswordNeededError, FloodWaitError, RPCError
from telethon.errors.rpcerrorlist import (
    UserDeactivatedBanError, AuthKeyUnregisteredError, PasswordHashInvalidError,
    UsernameOccupiedError, ChannelPrivateError, UserAlreadyParticipantError,
    InviteHashExpiredError, InviteHashInvalidError, InviteRequestSentError,
    ChatWriteForbiddenError, UserBannedInChannelError, SlowModeWaitError, MsgIdInvalidError,
    ChatGuestSendForbiddenError
)
from telethon.tl.types import Chat, Channel
import storage_manager
import autoreg_manager

async def cancellable_sleep(seconds, cancel_event):
    try:
        await asyncio.wait_for(cancel_event.wait(), timeout=seconds)
    except asyncio.TimeoutError:
        pass

def random_string(length=12):
    first_char = random.choice(string.ascii_lowercase)
    other_chars = string.ascii_lowercase + string.digits
    rest = ''.join(random.choice(other_chars) for _ in range(length - 1))
    return first_char + rest

async def _check_spamblock(client: TelegramClient):
    try:
        await client.send_message('spambot', '/start')
        await asyncio.sleep(3)
        messages = await client.get_messages('spambot', limit=1)
        if not messages:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç @spambot."
        
        reply_text = messages[0].message

        if "Good news, no limits are currently applied" in reply_text:
            return None
        
        elif "Your account was blocked for violations of the Telegram Terms of Service" in reply_text:
            return "üíÄ –ó–∞–º–æ—Ä–æ–∂–µ–Ω (ToS)"
            
        elif "your account is now limited until" in reply_text:
            match = re.search(r'limited until (.*?)\.', reply_text)
            date_str = match.group(1) if match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç—ã"
            return f"ü•∂ –°–ø–∞–º-–±–ª–æ–∫ (–¥–æ {date_str})"
            
        elif "I‚Äôm very sorry that you had to contact me" in reply_text or "some actions can trigger a harsh response" in reply_text:
            return "ü•∂ –°–ø–∞–º-–±–ª–æ–∫ (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π)"
        
        else:
            return f"‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç @spambot: {reply_text[:50]}..."

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º-–±–ª–æ–∫–∞: {type(e).__name__}"

class TelethonWorker:
    def __init__(self, session_name, proxy_queue, file_lock, settings_lock, callback, cancel_event, semaphore, task_name, task_data):
        self.session_name = session_name
        self.proxy_queue = proxy_queue
        self.file_lock = file_lock
        self.settings_lock = settings_lock
        self.callback = callback
        self.cancel_event = cancel_event
        self.client: TelegramClient = None
        self.semaphore = semaphore
        
        self.task_name = task_name
        self.task_data = task_data
        self.task_settings = task_data.get('settings', {})

    async def _connect(self):
        await self.callback(f"{self.session_name}:üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        json_path = os.path.join(storage_manager.SESSIONS_DIR, f"{self.session_name}.json")
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except FileNotFoundError:
            await self.callback(f"{self.session_name}:‚ùå –§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ (.json) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return False
        
        api_id_val = data.get('api_id') or data.get('app_id')
        api_hash = data.get('api_hash') or data.get('app_hash')
        
        try:
            api_id = int(api_id_val)
        except (ValueError, TypeError):
            await self.callback(f"{self.session_name}:‚ùå –í .json —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'api_id'/'app_id'.")
            return False
            
        two_fa = data.get('twoFA')
        device_model = data.get('device_model') or data.get('device') or 'PC'
        system_version = data.get('system_version') or data.get('sdk') or 'Windows 10'
        app_version = data.get('app_version', '4.8.1 x64')
        lang_code = data.get('lang_code') or data.get('lang_pack') or 'en'
        system_lang_code = data.get('system_lang_code') or data.get('system_lang_pack') or 'en-US'

        if self.task_data.get('type') == 'check_all':
            lang_code = 'en'
            system_lang_code = 'en-US'
            await self.callback(f"{self.session_name}:‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º-–±–ª–æ–∫–∞.")

        if not api_id or not api_hash:
            await self.callback(f"{self.session_name}:‚ùå –í .json —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'api_id'/'app_id' –∏–ª–∏ 'api_hash'/'app_hash'.")
            return False

        proxy_str = "–±–µ–∑ –ø—Ä–æ–∫—Å–∏"
        proxy_dict = None
        proxy_from_queue = None
        
        if not self.proxy_queue.empty():
            try:
                proxy_from_queue = self.proxy_queue.get_nowait()
                p = proxy_from_queue.split(':')
                if len(p) == 4:
                    proxy_dict = {'proxy_type': 'socks5', 'addr': p[0], 'port': int(p[1]), 'username': p[2], 'password': p[3]}
                    proxy_str = f"{p[0]}:{p[1]} (–∏–∑ –ø—É–ª–∞)"
            except asyncio.QueueEmpty:
                pass

        await self.callback(f"{self.session_name}:üîå –ü–æ–¥–∫–ª. —á–µ—Ä–µ–∑ {proxy_str}")

        try:
            self.client = TelegramClient(
                os.path.join(storage_manager.SESSIONS_DIR, self.session_name),
                api_id,
                api_hash,
                device_model=device_model,
                system_version=system_version,
                app_version=app_version,
                lang_code=lang_code,
                system_lang_code=system_lang_code,
                proxy=proxy_dict,
                timeout=15,
                catch_up=False 
            )
            await self.client.connect()

            if not await self.client.is_user_authorized():
                await self.client.sign_in(password=two_fa)

            if proxy_from_queue: self.proxy_queue.put_nowait(proxy_from_queue)
            return True
        
        except (asyncio.TimeoutError, OSError) as e:
            await self.callback(f"{self.session_name}:‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ({type(e).__name__}).")
            return False
        except Exception as e:
            error_map = {
                UserDeactivatedBanError: "‚ùå –ó–∞–±–∞–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.", AuthKeyUnregisteredError: "‚ùå –ó–∞–±–∞–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.",
                SessionPasswordNeededError: "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å (–ø—Ä–æ–≤–µ—Ä—å –ø–æ–ª–µ twoFA –≤ .json).", 
                PasswordHashInvalidError: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π 2FA –ø–∞—Ä–æ–ª—å."
            }
            error_message = error_map.get(type(e), f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            await self.callback(f"{self.session_name}:{error_message}")
            if self.client and self.client.is_connected():
                await self.client.disconnect()
            return False

    async def run_task(self, task_coroutine, *args, **kwargs):
        if await self._connect():
            reply_setting_enabled = self.task_settings.get('reply_in_pm', False)
            pm_reply_messages = storage_manager.read_task_multiline_messages(self.task_name, 'pm_replies')

            if reply_setting_enabled and pm_reply_messages:
                async def private_message_handler(event):
                    if event.is_private and not (await event.get_sender()).bot:
                        await asyncio.sleep(random.randint(5, 15))
                        reply_text = random.choice(pm_reply_messages)
                        await event.respond(reply_text)
                        await self.callback(f"{self.session_name}: üì® –û—Ç–≤–µ—Ç–∏–ª –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.sender_id}")

                self.client.add_event_handler(private_message_handler, events.NewMessage(incoming=True))
                await self.callback(f"{self.session_name}: ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ –õ–° –≤–∫–ª—é—á–µ–Ω.")

            try:
                await task_coroutine(*args, **kwargs)
            except asyncio.CancelledError:
                pass
            except (OSError, asyncio.TimeoutError, RPCError) as e:
                await self.callback(f"{self.session_name}:üì° –°–±–æ–π —Å–µ—Ç–∏: {type(e).__name__}. –ó–∞–≤–µ—Ä—à–∞—é.")
            except Exception as e:
                await self.callback(f"{self.session_name}:‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
            finally:
                if self.client and self.client.is_connected():
                    await self.client.disconnect()
        else:
            pass

    async def task_check_account(self, change_name, change_avatar, change_lastname, perform_spam_check: bool = False):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            
            if perform_spam_check:
                block_status = await _check_spamblock(self.client)
                if block_status:
                    await self.callback(f"{self.session_name}: {block_status}")
                    return

            me = await self.client.get_me()
            status = f"‚úÖ –í–∞–ª–∏–¥–µ–Ω ({me.first_name} {me.last_name or ''})".strip()
            await self.callback(f"{self.session_name}:{status}")
            
            if change_avatar:
                if self.cancel_event.is_set(): return
                avatars_dir = storage_manager.get_task_file_path(self.task_name, 'avatars')
                images = [f for f in os.listdir(avatars_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))] if os.path.exists(avatars_dir) else []

                if images:
                    try:
                        photo_path = os.path.join(avatars_dir, random.choice(images))
                        await self.client(UploadProfilePhotoRequest(file=await self.client.upload_file(photo_path)))
                        status += " | üñºÔ∏è –ê–≤–∞—Ç–∞—Ä –∏–∑–º–µ–Ω–µ–Ω"
                    except Exception as e: status += f" | ‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∞: {e}"
                else: status += " | ‚ö†Ô∏è –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"
                await self.callback(f"{self.session_name}:{status}")
            
            if change_name:
                if self.cancel_event.is_set(): return
                names = storage_manager.read_task_text_file_lines(self.task_name, 'names')
                if names:
                    try:
                        new_name = random.choice(names)
                        await self.client(UpdateProfileRequest(first_name=new_name))
                        status += f" | üë§ –ò–º—è -> '{new_name}'"
                    except Exception as e: status += f" | ‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏: {e}"
                else: status += f" | ‚ö†Ô∏è –§–∞–π–ª names.txt –¥–ª—è –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç"
                await self.callback(f"{self.session_name}:{status}")
            
            if change_lastname:
                if self.cancel_event.is_set(): return
                lastnames = storage_manager.read_task_text_file_lines(self.task_name, 'lastnames')
                if lastnames:
                    try:
                        new_lastname = random.choice(lastnames)
                        await self.client(UpdateProfileRequest(last_name=new_lastname))
                        status += f" | üìú –§–∞–º–∏–ª–∏—è -> '{new_lastname}'"
                    except Exception as e: status += f" | ‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–º–∏–ª–∏–∏: {e}"
                else: status += " | ‚ö†Ô∏è –§–∞–π–ª lastnames.txt –¥–ª—è –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç"
                await self.callback(f"{self.session_name}:{status}")
    
    async def task_change_bio(self):
        """–°–º–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}: üìù –°–º–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")
            
            bios = storage_manager.read_task_text_file_lines(self.task_name, 'bios')
            if not bios:
                await self.callback(f"{self.session_name}: ‚ö†Ô∏è –§–∞–π–ª bios.txt –ø—É—Å—Ç")
                return
            
            try:
                new_bio = random.choice(bios)
                await self.client(UpdateProfileRequest(about=new_bio))
                await self.callback(f"{self.session_name}: ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: '{new_bio[:50]}...'")
            except Exception as e:
                await self.callback(f"{self.session_name}: ‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        
    async def task_delete_lastnames(self):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏...")
            try:
                await self.client(UpdateProfileRequest(last_name=""))
                await self.callback(f"{self.session_name}: ‚úÖ –§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                await self.callback(f"{self.session_name}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–º–∏–ª–∏–∏: {e}")

    async def task_create_channel(self):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            status = "‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞..."
            await self.callback(f"{self.session_name}:{status}")

            channel_names = storage_manager.read_task_text_file_lines(self.task_name, 'channel_names')
            descriptions = storage_manager.read_task_text_file_lines(self.task_name, 'channel_descriptions')

            if not channel_names or not descriptions:
                await self.callback(f"{self.session_name}:‚ùå –§–∞–π–ª—ã channelnames.txt –∏–ª–∏ channel_descriptions.txt –¥–ª—è –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç—ã.")
                return

            fwd_link = self.task_settings.get('forward_post_link')
            if not fwd_link:
                await self.callback(f"{self.session_name}:‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–∞–¥–∞—á–∏.")
                return

            channel_title = random.choice(channel_names)
            channel_about = random.choice(descriptions)
            try:
                created_channel_result = await self.client(CreateChannelRequest(title=channel_title, about=channel_about))
                channel = created_channel_result.chats[0]
                status += f" | ‚úÖ –ö–∞–Ω–∞–ª '{channel_title}' —Å–æ–∑–¥–∞–Ω."
                await self.callback(f"{self.session_name}:{status}")
            except Exception as e:
                await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
                return

            while not self.cancel_event.is_set():
                try:
                    username = random_string()
                    await self.client(UpdateUsernameRequest(channel.id, username))
                    status += f" | @{username}"
                    await self.callback(f"{self.session_name}:{status}")
                    break
                except UsernameOccupiedError:
                    continue
                except FloodWaitError as e:
                    await self.callback(f"{self.session_name}:{status} | ‚è≥ –§–ª—É–¥, –∂–¥—É {e.seconds}—Å...")
                    await cancellable_sleep(e.seconds, self.cancel_event)
                except Exception as e:
                    status += f" | ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞: {e}"
                    await self.callback(f"{self.session_name}:{status}")
                    break
            
            if self.cancel_event.is_set(): return

            channel_avatars_dir = storage_manager.get_task_file_path(self.task_name, 'channel_avatars')
            images = [f for f in os.listdir(channel_avatars_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))] if os.path.exists(channel_avatars_dir) else []
            if images:
                try:
                    avatar_path = os.path.join(channel_avatars_dir, random.choice(images))
                    await self.client(EditPhotoRequest(channel=channel, photo=await self.client.upload_file(avatar_path)))
                    status += " | üñºÔ∏è –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    await self.callback(f"{self.session_name}:{status}")
                except Exception as e:
                    status += f" | ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}"
                    await self.callback(f"{self.session_name}:{status}")
            else:
                status += " | ‚ö†Ô∏è –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ"
                await self.callback(f"{self.session_name}:{status}")

            if self.cancel_event.is_set(): return

            try:
                await self.client(UpdatePersonalChannelRequest(channel=channel))
                status += " | üìå –í –ø—Ä–æ—Ñ–∏–ª–µ"
                await self.callback(f"{self.session_name}:{status}")
            except Exception as e:
                status += f" | ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {e}"
                await self.callback(f"{self.session_name}:{status}")
            
            if self.cancel_event.is_set(): return

            try:
                match = re.search(r'(t\.me|telegram\.me)/(c/)?([\w\d_]+)/(\d+)', fwd_link)
                if not match:
                    raise ValueError("–§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                
                channel_username_or_id = match.group(3)
                msg_id = int(match.group(4))
                
                try:
                    source_entity = int(f"-100{channel_username_or_id}")
                except ValueError:
                    source_entity = channel_username_or_id

                await self.client.forward_messages(entity=channel, messages=msg_id, from_peer=source_entity)
                status += " | üì® –ü–æ—Å—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω"
                await self.callback(f"{self.session_name}:{status}")
            except Exception as e:
                status += f" | ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞: {e}"
                await self.callback(f"{self.session_name}:{status}")
    
    async def task_update_channel_design(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}: üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dialogs = await self.client.get_dialogs()
            my_channels = []
            
            for dialog in dialogs:
                if hasattr(dialog.entity, 'creator') and dialog.entity.creator:
                    # –≠—Ç–æ –Ω–∞—à –∫–∞–Ω–∞–ª
                    my_channels.append(dialog.entity)
            
            if not my_channels:
                await self.callback(f"{self.session_name}: ‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            
            channel_names = storage_manager.read_task_text_file_lines(self.task_name, 'channel_names')
            channel_descriptions = storage_manager.read_task_text_file_lines(self.task_name, 'channel_descriptions')
            
            updated_count = 0
            
            for channel in my_channels:
                if self.cancel_event.is_set():
                    break
                
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    if channel_names:
                        new_title = random.choice(channel_names)
                        await self.client.edit_admin(channel, 'me', title=new_title)
                        await self.callback(f"{self.session_name}: üìù {channel.title} ‚Üí –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_title}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    if channel_descriptions:
                        new_description = random.choice(channel_descriptions)
                        await self.client(EditAboutRequest(channel, new_description))
                        await self.callback(f"{self.session_name}: üìÑ {channel.title} ‚Üí –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞
                    channel_avatars_dir = storage_manager.get_task_file_path(self.task_name, 'channel_avatars')
                    if os.path.exists(channel_avatars_dir):
                        images = [f for f in os.listdir(channel_avatars_dir) 
                                if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                        if images:
                            avatar_path = os.path.join(channel_avatars_dir, random.choice(images))
                            await self.client(EditPhotoRequest(
                                channel=channel,
                                photo=await self.client.upload_file(avatar_path)
                            ))
                            await self.callback(f"{self.session_name}: üñºÔ∏è {channel.title} ‚Üí –∞–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    updated_count += 1
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤
                    await asyncio.sleep(random.randint(5, 15))
                    
                except Exception as e:
                    await self.callback(f"{self.session_name}: ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {channel.title}: {e}")
            
            await self.callback(f"{self.session_name}: ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {updated_count}")

    async def task_delete_avatars(self):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}: –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤...")
            try:
                photos_to_delete = await self.client.get_profile_photos('me')
                if not photos_to_delete:
                    await self.callback(f"{self.session_name}: ‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
                    return

                await self.client(DeletePhotosRequest(id=photos_to_delete))
                await self.callback(f"{self.session_name}: ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(photos_to_delete)} –∞–≤–∞—Ç–∞—Ä–æ–≤.")

            except Exception as e:
                await self.callback(f"{self.session_name}: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
        
    async def task_join_chats(self, work_queue: asyncio.Queue):
        processed_count = 0
        chat_file_path = storage_manager.get_task_file_path(self.task_name, 'chats')
        
        while not work_queue.empty() and not self.cancel_event.is_set():
            try:
                chat_link = work_queue.get_nowait()
            except asyncio.QueueEmpty:
                break 

            flood_wait_seconds = 0
            
            async with self.semaphore:
                if self.cancel_event.is_set():
                    await work_queue.put(chat_link)
                    break
                try:
                    status_prefix = f"–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {chat_link[:30]}..."
                    await self.callback(f"{self.session_name}:{status_prefix}")
                    result_symbol = ""
                    
                    clean_link = chat_link.strip().replace('https://', '').replace('http://', '')
                    if 'joinchat/' in clean_link or '+' in clean_link:
                        invite = clean_link.split('joinchat/')[-1] if 'joinchat/' in clean_link else clean_link.split('+')[-1]
                        await self.client(ImportChatInviteRequest(invite))
                    else: 
                        await self.client(JoinChannelRequest(chat_link))
                    result_symbol = "‚úÖ"
                    processed_count += 1
                    
                    if chat_file_path:
                        await storage_manager.remove_line_from_file(
                            chat_file_path,
                            chat_link, self.file_lock
                        )
                except InviteRequestSentError:
                    result_symbol = "üì®"
                    processed_count += 1
                except UserAlreadyParticipantError: 
                    result_symbol = "üü°"
                    processed_count += 1
                except (InviteHashExpiredError, InviteHashInvalidError, ValueError): 
                    result_symbol = "‚ùå"
                except FloodWaitError as e:
                    result_symbol = f"‚è≥({e.seconds}—Å)"
                    flood_wait_seconds = e.seconds
                    await work_queue.put(chat_link)
                except Exception as e: 
                    result_symbol = f"‚ùå({type(e).__name__})"
                
                await self.callback(f"{self.session_name}:{status_prefix} -> {result_symbol}")
            
            if flood_wait_seconds > 0:
                await cancellable_sleep(flood_wait_seconds, self.cancel_event)
            else:
                cooldown_time = random.randint(30, 90)
                await cancellable_sleep(cooldown_time, self.cancel_event)
        
        await self.callback(f"{self.session_name}:üèÅ –ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –í—Å—Ç—É–ø–∏–ª –≤ {processed_count} —á–∞—Ç–æ–≤.")

    async def task_autobroadcast(self):
        messages = storage_manager.read_task_multiline_messages(self.task_name, 'messages')
        if not messages:
            await self.callback(f"{self.session_name}:‚ùå –§–∞–π–ª messages.txt –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç.")
            return
            
        while not self.cancel_event.is_set():
            target_mode = self.task_settings.get('broadcast_target', 'chats')
            await self.callback(f"{self.session_name}:üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª...")
            
            dialogs = await self.client.get_dialogs(limit=None)
            
            global_settings = storage_manager.load_settings()
            initial_blacklist = set(global_settings.get('blacklist', []))
            targets = []

            if target_mode in ['chats', 'both']:
                chats = [d for d in dialogs if isinstance(d.entity, (Chat, Channel)) and getattr(d.entity, 'megagroup', True) and d.entity.id not in initial_blacklist]
                targets.extend([{'type': 'chat', 'entity': c.entity, 'title': c.entity.title} for c in chats])
            
            if target_mode in ['comments', 'both']:
                channels = [d for d in dialogs if isinstance(d.entity, Channel) and not getattr(d.entity, 'megagroup', False) and d.entity.id not in initial_blacklist]
                for channel in channels:
                    try:
                        last_post = (await self.client.get_messages(channel.entity, limit=1))[0]
                        if last_post and last_post.replies and last_post.replies.replies > 0:
                            targets.append({'type': 'comment', 'entity': channel.entity, 'post_id': last_post.id, 'title': f"–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ '{channel.entity.title}'"})
                    except Exception: continue
            
            random.shuffle(targets)
            await self.callback(f"{self.session_name}:üéØ –ù–∞–π–¥–µ–Ω–æ {len(targets)} —Ü–µ–ª–µ–π.")

            for i, target in enumerate(targets):
                if self.cancel_event.is_set(): break
                
                status_prefix = f"–†–∞—Å—Å—ã–ª–∫–∞: [{i+1}/{len(targets)}] -> '{target['title']}'"
                result_symbol = ""
                sleep_duration_from_error = 0
                
                async with self.semaphore:
                    if self.cancel_event.is_set(): break
                    try:
                        async with self.settings_lock:
                            current_settings = storage_manager.load_settings()
                            is_blacklisted = target['entity'].id in current_settings.get('blacklist', [])

                        if is_blacklisted:
                            result_symbol = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫, —É–∂–µ –≤ –ß–°"
                        else:
                            msg_to_send = random.choice(messages)
                            sent_msg = None
                            if target['type'] == 'chat': sent_msg = await self.client.send_message(target['entity'], msg_to_send)
                            elif target['type'] == 'comment': sent_msg = await self.client.send_message(target['entity'], msg_to_send, comment_to=target['post_id'])
                            
                            result_symbol = "‚úÖ"
                            await cancellable_sleep(15, self.cancel_event)
                            if self.cancel_event.is_set(): break

                            history = await self.client.get_messages(target['entity'], ids=[sent_msg.id])
                            if not history or history[0] is None:
                                result_symbol = "üóëÔ∏è –≤ –ß–° (—É–¥–∞–ª–µ–Ω–æ)"
                                entity_id = target['entity'].id
                                async with self.settings_lock:
                                    current_settings = storage_manager.load_settings()
                                    if entity_id not in current_settings.get('blacklist', []):
                                        current_settings.setdefault('blacklist', []).append(entity_id)
                                        storage_manager.save_settings(current_settings)
                    
                    except (ChatWriteForbiddenError, UserBannedInChannelError, MsgIdInvalidError, ChatGuestSendForbiddenError) as e:
                        result_symbol = f"üö´ –≤ –ß–° ({type(e).__name__})"
                        entity_id = target['entity'].id
                        async with self.settings_lock:
                            current_settings = storage_manager.load_settings()
                            if entity_id not in current_settings.get('blacklist', []):
                                current_settings.setdefault('blacklist', []).append(entity_id)
                                storage_manager.save_settings(current_settings)
                    except (SlowModeWaitError, FloodWaitError) as e:
                        result_symbol = f"‚è≥({e.seconds}—Å)"
                        sleep_duration_from_error = e.seconds
                    except Exception as e:
                        result_symbol = f"‚ùå({type(e).__name__})"

                final_status = f"{status_prefix} -> {result_symbol}"
                await self.callback(f"{self.session_name}:{final_status}")

                if '–≤ –ß–°' not in result_symbol and '–ü—Ä–æ–ø—É—Å–∫' not in result_symbol and not self.cancel_event.is_set():
                    if sleep_duration_from_error > 0:
                        delay = sleep_duration_from_error
                    else:
                        delay = random.randint(self.task_settings['broadcast_interval'][0], self.task_settings['broadcast_interval'][1])
                    
                    await self.callback(f"{self.session_name}:–ü–∞—É–∑–∞ {delay}—Å...")
                    await cancellable_sleep(delay, self.cancel_event)

            if not self.cancel_event.is_set():
                cycle_delay = 300
                await self.callback(f"{self.session_name}:üèÅ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–∞—É–∑–∞ {cycle_delay // 60} –º–∏–Ω...")
                await cancellable_sleep(cycle_delay, self.cancel_event)
                
        await self.callback(f"{self.session_name}:üõë –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
    async def task_advanced_spam(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π"""
        settings = self.task_settings
        spam_type = settings.get('spam_type', 'text')
        target_type = settings.get('spam_target_type', 'chats')
        delay_min = settings.get('spam_delay_min', 30)
        delay_max = settings.get('spam_delay_max', 90)
        
        await self.callback(f"{self.session_name}: üöÄ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º ({spam_type} ‚Üí {target_type})")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ø–∞–º–∞
        messages = []
        stickers = []
        forward_data = None
        
        if spam_type in ['text', 'mixed']:
            messages = storage_manager.read_task_multiline_messages(self.task_name, 'messages')
            if not messages:
                await self.callback(f"{self.session_name}: ‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ø–∞–º–∞")
                return
        
        if spam_type in ['sticker', 'mixed']:
            sticker_list = storage_manager.read_task_text_file_lines(self.task_name, 'stickers')
            if sticker_list:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ ID —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª—ã —Å—Ç–∏–∫–µ—Ä–æ–≤
                stickers = sticker_list
        
        if spam_type == 'forward':
            forward_messages = storage_manager.read_task_text_file_lines(self.task_name, 'forward_messages')
            if forward_messages and forward_messages[0]:
                # –§–æ—Ä–º–∞—Ç: channel_id:message_id
                try:
                    parts = forward_messages[0].split(':')
                    forward_data = {'channel_id': int(parts[0]), 'message_id': int(parts[1])}
                except:
                    await self.callback(f"{self.session_name}: ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return
        
        while not self.cancel_event.is_set():
            await self.callback(f"{self.session_name}: üîÑ –ù–æ–≤—ã–π —Ü–∏–∫–ª —Å–ø–∞–º–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
            targets = await self._get_spam_targets(target_type)
            
            if not targets:
                await self.callback(f"{self.session_name}: ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º–∞")
                break
            
            random.shuffle(targets)
            await self.callback(f"{self.session_name}: üéØ –ù–∞–π–¥–µ–Ω–æ {len(targets)} —Ü–µ–ª–µ–π")
            
            for i, target in enumerate(targets):
                if self.cancel_event.is_set():
                    break
                
                try:
                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                    current_spam_type = spam_type
                    if spam_type == 'mixed':
                        current_spam_type = random.choice(['text', 'sticker'] if stickers else ['text'])
                    
                    success = False
                    
                    if current_spam_type == 'text' and messages:
                        message = random.choice(messages)
                        await self.client.send_message(target['entity'], message)
                        success = True
                        content_preview = message[:30] + "..." if len(message) > 30 else message
                        
                    elif current_spam_type == 'sticker' and stickers:
                        sticker = random.choice(stickers)
                        try:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª —Å—Ç–∏–∫–µ—Ä–∞
                            await self.client.send_file(target['entity'], sticker)
                            success = True
                            content_preview = f"—Å—Ç–∏–∫–µ—Ä: {sticker}"
                        except:
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                            await self.client.send_message(target['entity'], sticker)
                            success = True
                            content_preview = sticker
                    
                    elif current_spam_type == 'forward' and forward_data:
                        await self.client.forward_messages(
                            target['entity'],
                            forward_data['message_id'],
                            forward_data['channel_id']
                        )
                        success = True
                        content_preview = "–ø–µ—Ä–µ—Å—ã–ª–∫–∞"
                    
                    if success:
                        await self.callback(
                            f"{self.session_name}: ‚úÖ [{i+1}/{len(targets)}] {target['title'][:20]} ‚Üí {content_preview}"
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ø–∞–ª–∏ –≤ –ß–°)
                        await asyncio.sleep(2)
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        delay = random.randint(delay_min, delay_max)
                        await self.callback(f"{self.session_name}: ‚è≥ –ü–∞—É–∑–∞ {delay}—Å...")
                        await cancellable_sleep(delay, self.cancel_event)
                
                except (ChatWriteForbiddenError, UserBannedInChannelError) as e:
                    await self.callback(f"{self.session_name}: üö´ {target['title'][:20]} ‚Üí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°
                    await self._add_to_blacklist(target['entity'].id)
                    
                except (SlowModeWaitError, FloodWaitError) as e:
                    await self.callback(f"{self.session_name}: ‚è≥ –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å: {e.seconds}—Å")
                    await cancellable_sleep(e.seconds, self.cancel_event)
                    
                except Exception as e:
                    await self.callback(f"{self.session_name}: ‚ùå {target['title'][:20]} ‚Üí {type(e).__name__}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            if not self.cancel_event.is_set():
                cycle_delay = 300  # 5 –º–∏–Ω—É—Ç
                await self.callback(f"{self.session_name}: üèÅ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–∞—É–∑–∞ {cycle_delay//60} –º–∏–Ω...")
                await cancellable_sleep(cycle_delay, self.cancel_event)
        
        await self.callback(f"{self.session_name}: üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def task_dm_spam(self):
        """–°–ø–∞–º –ø–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        settings = self.task_settings
        use_existing_only = settings.get('use_existing_dialogs_only', False)
        
        await self.callback(f"{self.session_name}: üì® –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º –ø–æ –õ–°...")
        
        messages = storage_manager.read_task_multiline_messages(self.task_name, 'messages')
        if not messages:
            await self.callback(f"{self.session_name}: ‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ø–∞–º–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º–∞
        if use_existing_only:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            dialogs = await self.client.get_dialogs()
            targets = []
            for dialog in dialogs:
                if hasattr(dialog.entity, 'bot') and not dialog.entity.bot:
                    # –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –±–æ—Ç
                    targets.append({
                        'entity': dialog.entity,
                        'title': f"{dialog.entity.first_name or ''} {dialog.entity.last_name or ''}".strip(),
                        'has_messages': True
                    })
        else:
            # –ë–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ spam_targets.txt
            user_targets = storage_manager.read_task_text_file_lines(self.task_name, 'spam_targets')
            if not user_targets:
                await self.callback(f"{self.session_name}: ‚ùå –ù–µ—Ç —Ü–µ–ª–µ–π –≤ spam_targets.txt")
                return
            
            targets = []
            for user_target in user_targets:
                try:
                    user_entity = await self.client.get_entity(user_target)
                    if hasattr(user_entity, 'bot') and not user_entity.bot:
                        targets.append({
                            'entity': user_entity,
                            'title': f"{user_entity.first_name or ''} {user_entity.last_name or ''}".strip(),
                            'has_messages': False
                        })
                except Exception as e:
                    await self.callback(f"{self.session_name}: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {user_target}")
        
        if not targets:
            await self.callback(f"{self.session_name}: ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º–∞")
            return
        
        random.shuffle(targets)
        await self.callback(f"{self.session_name}: üë• –ù–∞–π–¥–µ–Ω–æ {len(targets)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        sent_count = 0
        for i, target in enumerate(targets):
            if self.cancel_event.is_set():
                break
            
            try:
                message = random.choice(messages)
                await self.client.send_message(target['entity'], message)
                sent_count += 1
                
                await self.callback(
                    f"{self.session_name}: ‚úÖ [{i+1}/{len(targets)}] {target['title'][:20]} ‚Üí –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                )
                
                # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –õ–° (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω)
                delay = random.randint(60, 120)  # 1-2 –º–∏–Ω—É—Ç—ã
                await self.callback(f"{self.session_name}: ‚è≥ –ü–∞—É–∑–∞ {delay}—Å...")
                await cancellable_sleep(delay, self.cancel_event)
                
            except Exception as e:
                await self.callback(f"{self.session_name}: ‚ùå {target['title'][:20]} ‚Üí {type(e).__name__}")
        
        await self.callback(f"{self.session_name}: üèÅ –°–ø–∞–º –ø–æ –õ–° –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
    
    async def _get_spam_targets(self, target_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è —Å–ø–∞–º–∞"""
        dialogs = await self.client.get_dialogs(limit=None)
        targets = []
        
        global_settings = storage_manager.load_settings()
        blacklist = set(global_settings.get('blacklist', []))
        
        for dialog in dialogs:
            if dialog.entity.id in blacklist:
                continue
            
            if target_type == 'chats':
                # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                if hasattr(dialog.entity, 'megagroup') and dialog.entity.megagroup:
                    targets.append({'entity': dialog.entity, 'title': dialog.title})
                elif hasattr(dialog.entity, 'broadcast') and not dialog.entity.broadcast:
                    targets.append({'entity': dialog.entity, 'title': dialog.title})
            
            elif target_type == 'channels':
                # –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã
                if hasattr(dialog.entity, 'broadcast') and dialog.entity.broadcast:
                    targets.append({'entity': dialog.entity, 'title': dialog.title})
            
            elif target_type == 'both':
                # –ò —á–∞—Ç—ã, –∏ –∫–∞–Ω–∞–ª—ã
                if not hasattr(dialog.entity, 'bot'):  # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ—Ç–æ–≤
                    targets.append({'entity': dialog.entity, 'title': dialog.title})
        
        return targets
    
    async def _add_to_blacklist(self, entity_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        async with self.settings_lock:
            settings = storage_manager.load_settings()
            if entity_id not in settings.get('blacklist', []):
                settings.setdefault('blacklist', []).append(entity_id)
                storage_manager.save_settings(settings)

    async def task_set_2fa(self, password):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}:üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ 2FA...")
            try:
                password_settings = await self.client(functions.account.GetPasswordRequest())
                if password_settings.has_password:
                     await self.callback(f"{self.session_name}:‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–£–¥–∞–ª–∏—Ç—å 2FA'.")
                     return

                await self.client.edit_2fa(new_password=password, hint=" ")
                await self.callback(f"{self.session_name}:‚úÖ 2FA –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ 2FA: {e}")

    async def task_remove_2fa(self, password):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}:üîì –£–¥–∞–ª–µ–Ω–∏–µ 2FA...")
            try:
                await self.client.edit_2fa(current_password=password, new_password=None)
                await self.callback(f"{self.session_name}:‚úÖ 2FA –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            except PasswordHashInvalidError:
                await self.callback(f"{self.session_name}:‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å 2FA.")
            except Exception as e:
                await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ 2FA: {e}")
                
    async def task_terminate_sessions(self):
        async with self.semaphore:
            if self.cancel_event.is_set(): return
            await self.callback(f"{self.session_name}:üí® –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–µ—Å—Å–∏–π...")
            try:
                terminated_count = 0
                authorizations = await self.client(functions.account.GetAuthorizationsRequest())
                for auth in authorizations.authorizations:
                    if not auth.current:
                        await self.client(functions.account.ResetAuthorizationRequest(hash=auth.hash))
                        terminated_count += 1
                
                await self.callback(f"{self.session_name}:‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {terminated_count} —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Å—Å–∏–π.")
            except Exception as e:
                await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {e}")

    async def task_reauthorize_account(self):
        await self.callback(f"{self.session_name}:üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")

        old_session_path = os.path.join(storage_manager.SESSIONS_DIR, self.session_name)
        new_session_name = f"{self.session_name}_reauth"
        new_session_path = os.path.join(storage_manager.SESSIONS_DIR, new_session_name)
        
        new_client = None

        try:
            if not self.client or not self.client.is_connected():
                await self.callback(f"{self.session_name}:‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏.")
                return

            me = await self.client.get_me()
            if not me or not me.phone:
                await self.callback(f"{self.session_name}:‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–µ—Å—Å–∏–∏.")
                return
            
            phone_number = f"+{me.phone}"
            await self.callback(f"{self.session_name}:üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {phone_number}")

            json_path = os.path.join(storage_manager.SESSIONS_DIR, f"{self.session_name}.json")
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
            except FileNotFoundError:
                await self.callback(f"{self.session_name}:‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .json –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
                return

            device_model = json_data.get('device_model') or json_data.get('device') or 'PC'
            system_version = json_data.get('system_version') or json_data.get('sdk') or 'Windows 10'
            app_version = json_data.get('app_version', '4.8.1 x64')
            lang_code = json_data.get('lang_pack', 'en')
            system_lang_code = json_data.get('system_lang_pack', 'en-US')
            
            api_id = self.client.api_id
            api_hash = self.client.api_hash
            new_client = TelegramClient(
                new_session_path, 
                api_id, 
                api_hash,
                device_model=device_model,
                system_version=system_version,
                app_version=app_version,
                lang_code=lang_code,
                system_lang_code=system_lang_code
            )
            await new_client.connect()

            sent_code = await new_client.send_code_request(phone_number)
            await self.callback(f"{self.session_name}:üí¨ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—É 15 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(15)

            login_code = None
            messages = await self.client.get_messages(777000, limit=5)
            for message in messages:
                if message.text and ("Login code" in message.text or "–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞" in message.text):
                    match = re.search(r'(\d{5})', message.text)
                    if match:
                        login_code = match.group(1)
                        await self.callback(f"{self.session_name}:üëç –ö–æ–¥ –Ω–∞–π–¥–µ–Ω: {login_code}")
                        break
            
            if not login_code:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤—Ö–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

            try:
                await new_client.sign_in(phone_number, login_code, phone_code_hash=sent_code.phone_code_hash)
            except SessionPasswordNeededError:
                await self.callback(f"{self.session_name}:üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA...")
                two_fa_password = self.task_settings.get("two_fa_password")
                if not two_fa_password:
                    raise Exception("–ü–∞—Ä–æ–ª—å 2FA –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–∞–¥–∞—á–∏.")
                
                await new_client.sign_in(password=two_fa_password)

            await self.callback(f"{self.session_name}:‚úÖ –í—Ö–æ–¥ –≤ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

            await self.client.log_out()
            await self.client.disconnect()
            await new_client.disconnect()
            
            if os.path.exists(f"{old_session_path}.session"):
                os.remove(f"{old_session_path}.session")
            
            os.rename(f"{new_session_path}.session", f"{old_session_path}.session")
            
            await self.callback(f"{self.session_name}:üéâ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        except Exception as e:
            await self.callback(f"{self.session_name}:‚ùå –û–®–ò–ë–ö–ê: {e}. –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            if new_client and new_client.is_connected():
                await new_client.disconnect()
            if os.path.exists(f"{new_session_path}.session"):
                os.remove(f"{new_session_path}.session")

    async def task_clean_account(self):
        await self.callback(f"{self.session_name}:üßπ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –∑–∞—á–∏—Å—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        try:
            dialogs = await self.client.get_dialogs(limit=None)
            total_dialogs = len(dialogs)
            await self.callback(f"{self.session_name}:üîç –ù–∞–π–¥–µ–Ω–æ {total_dialogs} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            
            for i, dialog in enumerate(dialogs):
                if self.cancel_event.is_set():
                    await self.callback(f"{self.session_name}:üõë –ó–∞—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return

                status_prefix = f"[{i+1}/{total_dialogs}] {dialog.name}"
                
                try:
                    await self.client.delete_dialog(dialog.entity)
                    await self.callback(f"{self.session_name}:{status_prefix} -> ‚úÖ –£–¥–∞–ª–µ–Ω/–í—ã—à–µ–ª")
                except Exception as e:
                    await self.callback(f"{self.session_name}:{status_prefix} -> ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}")
                
                interval_settings = self.task_settings.get('broadcast_interval', [5, 15])
                delay = random.randint(interval_settings[0], interval_settings[1])
                await cancellable_sleep(delay, self.cancel_event)

            await self.callback(f"{self.session_name}:üéâ –ó–∞—á–∏—Å—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            await self.callback(f"{self.session_name}:‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞—á–∏—Å—Ç–∫–∏: {e}")
    
    async def task_autoreg_warmup(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await self.callback(f"{self.session_name}:üî• –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥—Ä–µ–≤ –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        autoreg_mgr = autoreg_manager.get_autoreg_manager(self.callback)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
        account_age = autoreg_mgr.detect_account_age(self.session_name)
        await self.callback(f"{self.session_name}:üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {account_age}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = autoreg_mgr.get_autoreg_recommendations(account_age)
        await self.callback(f"{self.session_name}:üìã –†–∏—Å–∫: {recommendations['risk']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤
        success = await autoreg_mgr.warmup_account(self.session_name, self.proxy_queue)
        
        if success:
            await self.callback(f"{self.session_name}:‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞")
    
    async def task_autoreg_gentle_join(self):
        """–ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        await self.callback(f"{self.session_name}:üå± –ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats = storage_manager.read_task_text_file_lines(self.task_name, 'chats')
        if not chats:
            await self.callback(f"{self.session_name}:‚ùå –§–∞–π–ª chats.txt –ø—É—Å—Ç")
            return
        
        autoreg_mgr = autoreg_manager.get_autoreg_manager(self.callback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        can_use, status_msg, settings = autoreg_mgr.get_account_status_for_task(
            self.session_name, "join_chats"
        )
        
        if not can_use:
            await self.callback(f"{self.session_name}:üö´ {status_msg}")
            return
        
        await self.callback(f"{self.session_name}:‚úÖ {status_msg}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        joined_count = await autoreg_mgr.gentle_join_chats(self.client, chats, self.session_name)
        await self.callback(f"{self.session_name}:üèÅ –ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {joined_count} —á–∞—Ç–æ–≤")
    
    async def task_autoreg_gentle_spam(self):
        """–ú—è–≥–∫–∏–π —Å–ø–∞–º –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        await self.callback(f"{self.session_name}:üåø –ú—è–≥–∫–∏–π —Å–ø–∞–º –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = storage_manager.read_task_multiline_messages(self.task_name, 'messages')
        if not messages:
            await self.callback(f"{self.session_name}:‚ùå –§–∞–π–ª messages.txt –ø—É—Å—Ç")
            return
        
        autoreg_mgr = autoreg_manager.get_autoreg_manager(self.callback)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ø–∞–º–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–¥–∞—á–∏
        spam_target_type = self.task_settings.get('spam_target_type', 'chats')
        task_type = f"spam_{spam_target_type}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        can_use, status_msg, settings = autoreg_mgr.get_account_status_for_task(
            self.session_name, task_type
        )
        
        if not can_use:
            await self.callback(f"{self.session_name}:üö´ {status_msg}")
            return
        
        await self.callback(f"{self.session_name}:‚úÖ {status_msg}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è —Å–ø–∞–º–∞
        targets = await self._get_spam_targets(spam_target_type)
        if not targets:
            await self.callback(f"{self.session_name}:‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º—è–≥–∫–∏–π —Å–ø–∞–º
        sent_count, error_count = await autoreg_mgr.gentle_spam(
            self.client, targets, messages, self.session_name, task_type
        )
        
        await self.callback(f"{self.session_name}:üèÅ –ú—è–≥–∫–∏–π —Å–ø–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω: {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
    
    async def task_autoreg_setup_profile(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await self.callback(f"{self.session_name}:üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        
        autoreg_mgr = autoreg_manager.get_autoreg_manager(self.callback)
        account_age = autoreg_mgr.detect_account_age(self.session_name)
        
        await self.callback(f"{self.session_name}:üìÖ –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {account_age}")
        
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –∏–º—è (—Å–∞–º–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ)
            names = storage_manager.read_task_text_file_lines(self.task_name, 'names')
            if names:
                new_name = random.choice(names)
                await self.client(UpdateProfileRequest(first_name=new_name))
                await self.callback(f"{self.session_name}:üë§ –ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
                
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
                await asyncio.sleep(random.randint(60, 120))
            
            # 2. –ü–æ—Ç–æ–º —Ñ–∞–º–∏–ª–∏—è
            lastnames = storage_manager.read_task_text_file_lines(self.task_name, 'lastnames')
            if lastnames:
                new_lastname = random.choice(lastnames)
                await self.client(UpdateProfileRequest(last_name=new_lastname))
                await self.callback(f"{self.session_name}:üìú –§–∞–º–∏–ª–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_lastname}")
                
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ñ–∞–º–∏–ª–∏–∏
                await asyncio.sleep(random.randint(60, 120))
            
            # 3. –û–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ —Å–≤–µ–∂–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
            if account_age != "fresh":
                bios = storage_manager.read_task_text_file_lines(self.task_name, 'bios')
                if bios:
                    new_bio = random.choice(bios)
                    await self.client(UpdateProfileRequest(about=new_bio))
                    await self.callback(f"{self.session_name}:üìù –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_bio[:30]}...")
                    
                    # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
                    await asyncio.sleep(random.randint(90, 180))
            
            # 4. –ê–≤–∞—Ç–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–ª–æ–¥—ã—Ö –∏ –∑—Ä–µ–ª—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
            if account_age in ["young", "mature"]:
                avatars_dir = storage_manager.get_task_file_path(self.task_name, 'avatars')
                if os.path.exists(avatars_dir):
                    images = [f for f in os.listdir(avatars_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                    if images:
                        photo_path = os.path.join(avatars_dir, random.choice(images))
                        await self.client(UploadProfilePhotoRequest(file=await self.client.upload_file(photo_path)))
                        await self.callback(f"{self.session_name}:üñºÔ∏è –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            await self.callback(f"{self.session_name}:‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            await self.callback(f"{self.session_name}:‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")