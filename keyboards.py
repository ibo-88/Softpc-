# keyboards.py

import html
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import storage_manager

ACCOUNTS_PER_PAGE = 20
PROXIES_PER_PAGE = 10

TASK_STATUS_EMOJI = {
    'running': '‚ñ∂Ô∏è',
    'stopped': '‚èπÔ∏è'
}

TASK_TYPE_NAMES = {
    'check_all': '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    # –ê–≤—Ç–æ—Ä–µ–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    'autoreg_warmup': 'üî• –ü—Ä–æ–≥—Ä–µ–≤ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
    'autoreg_gentle_join': 'üå± –ú—è–≥–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–∞–≤—Ç–æ—Ä–µ–≥)',
    'autoreg_gentle_spam': 'üåø –ú—è–≥–∫–∏–π —Å–ø–∞–º (–∞–≤—Ç–æ—Ä–µ–≥)',
    'autoreg_setup_profile': 'üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∞–≤—Ç–æ—Ä–µ–≥)',
    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è
    'change_profile:name': 'üë§ –°–º–µ–Ω–∞ –∏–º–µ–Ω',
    'change_profile:lastname': 'üìú –°–º–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏–π',
    'change_profile:avatar': 'üñº –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤',
    'change_profile:bio': 'üìù –°–º–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
    'change_profile:name_last': 'üë§+üìú –ò–º–µ–Ω–∞ –∏ –§–∞–º–∏–ª–∏–∏',
    'change_profile:name_avatar': 'üë§+üñº –ò–º–µ–Ω–∞ –∏ –ê–≤–∞—Ç–∞—Ä—ã',
    'change_profile:last_avatar': 'üìú+üñº –§–∞–º–∏–ª–∏–∏ –∏ –ê–≤–∞—Ç–∞—Ä—ã',
    'change_profile:all': 'üë§+üìú+üñº+üìù –í—Å—ë –≤–º–µ—Å—Ç–µ',
    # –ö–∞–Ω–∞–ª—ã
    'create_channel': '‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤',
    'update_channel_design': 'üé® –°–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤',
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    'join_chats': 'üöÄ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã',
    'start_broadcast': 'üì£ –†–∞—Å—Å—ã–ª–∫–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)',
    # –°–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
    'spam_chats': 'üí¨ –°–ø–∞–º –ø–æ —á–∞—Ç–∞–º',
    'spam_channels': 'üì¢ –°–ø–∞–º –ø–æ –∫–∞–Ω–∞–ª–∞–º', 
    'spam_both': 'üí¨üì¢ –°–ø–∞–º –ø–æ —á–∞—Ç–∞–º + –∫–∞–Ω–∞–ª–∞–º',
    'spam_dm': 'üì® –°–ø–∞–º –ø–æ –ª–∏—á–∫–∞–º (‚ö†Ô∏è –†–ò–°–ö –°–õ–Å–¢–ê)',
    'spam_dm_existing': 'üì¨ –°–ø–∞–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –õ–°',
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ
    'delete_avatars': 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤',
    'delete_lastnames': 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–π',
    'set_2fa': 'üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 2FA',
    'remove_2fa': 'üîì –£–¥–∞–ª–∏—Ç—å 2FA',
    'terminate_sessions': 'üí® –í—ã–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏–∏',
    'reauthorize': 'üîÑ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
    'clean_account': 'üßπ –ü–æ–ª–Ω–∞—è –∑–∞—á–∏—Å—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞'
}

ACCOUNT_STATUS_EMOJI = {
    'valid': '‚úÖ',
    'frozen': 'üíÄ',
    'invalid': '‚ùå',
    'unknown': '‚ùî',
    'busy': '‚öôÔ∏è',
    'spamblock_temporary': 'ü•∂',
    'spamblock_permanent': 'ü•∂'
}

def get_main_menu():
    text = "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
    keyboard = [
        [InlineKeyboardButton("üíª –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data='menu_accounts'), InlineKeyboardButton("‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='menu_settings')],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–¥–∞—á–∏", callback_data='menu_tasks')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_accounts_menu():
    accounts_count = len(storage_manager.list_accounts())
    text = f"–í –±–∞–∑–µ: {accounts_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å (ZIP)", callback_data='accounts_add_zip')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data='accounts_list_all')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_accounts_list_menu(accounts, statuses, active_accounts, page=1):
    total_accounts = len(accounts)
    if not accounts:
        return "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_accounts')]
        ])

    total_pages = (total_accounts + ACCOUNTS_PER_PAGE - 1) // ACCOUNTS_PER_PAGE
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * ACCOUNTS_PER_PAGE
    end_index = start_index + ACCOUNTS_PER_PAGE
    accounts_on_page = accounts[start_index:end_index]
    
    keyboard = []
    for acc_name in accounts_on_page:
        if acc_name in active_accounts:
            emoji = ACCOUNT_STATUS_EMOJI['busy']
        else:
            status_key = statuses.get(acc_name, 'unknown')
            emoji = ACCOUNT_STATUS_EMOJI.get(status_key, '‚ùî')
        
        keyboard.append([InlineKeyboardButton(f"{emoji} {acc_name}", callback_data=f'accounts_delete:{acc_name}')])
    
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'accounts_list_page:{page-1}'))
    pagination_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data='none'))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'accounts_list_page:{page+1}'))
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∞–º–±–ª–æ–∫", callback_data='accounts_delete_by_status_prompt:spamblock_temporary'),
    ])
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—á–Ω—ã–π —Å–ø–∞–º–±–ª–æ–∫", callback_data='accounts_delete_by_status_prompt:spamblock_permanent'),
    ])
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ø–∞–º–±–ª–æ–∫–∏", callback_data='accounts_delete_by_status_prompt:all_spamblock'),
    ])
    
    keyboard.append([InlineKeyboardButton("üíÄ –£–¥–∞–ª–∏—Ç—å –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ (ToS) / –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ", callback_data='accounts_delete_by_status_prompt:frozen_invalid')])
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data='accounts_delete_all_prompt')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_accounts')])
    
    text = (
        f"<b>–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts} | –°—Ç—Ä. {page}/{total_pages}</b>\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.\n\n"
        f"<b>–õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:</b>\n"
        f"<b>{ACCOUNT_STATUS_EMOJI['valid']}</b> - –í–∞–ª–∏–¥–Ω—ã–π\n"
        f"<b>{ACCOUNT_STATUS_EMOJI['spamblock_temporary']}</b> - –°–ø–∞–º–±–ª–æ–∫ (–≤—Ä–µ–º./–≤–µ—á–Ω.)\n"
        f"<b>{ACCOUNT_STATUS_EMOJI['frozen']}</b> - –ó–∞–±–∞–Ω–µ–Ω (ToS)\n"
        f"<b>{ACCOUNT_STATUS_EMOJI['invalid']}</b> - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π (–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n"
        f"<b>{ACCOUNT_STATUS_EMOJI['busy']}</b> - –ó–∞–Ω—è—Ç –≤ –∑–∞–¥–∞—á–µ"
    )
    return text, InlineKeyboardMarkup(keyboard)

def get_delete_all_confirmation_menu():
    text = "‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–∫–∫–∞—É–Ω—Ç—ã?</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data='accounts_delete_all_confirm')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='accounts_list_all')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_delete_by_status_confirmation_menu(status_key):
    status_map = {
        'spamblock_temporary': "<b>–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ø–∞–º-–±–ª–æ–∫–æ–º</b>",
        'spamblock_permanent': "<b>–≤–µ—á–Ω—ã–º —Å–ø–∞–º-–±–ª–æ–∫–æ–º</b>",
        'all_spamblock': "—Å–æ <b>–≤—Å–µ–º–∏ –≤–∏–¥–∞–º–∏ —Å–ø–∞–º-–±–ª–æ–∫–∞</b>",
        'frozen_invalid': "<b>–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ (ToS)</b> –∏ <b>–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ</b>"
    }
    text_part = status_map.get(status_key, "–≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
    text = f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–∫–∫–∞—É–Ω—Ç—ã —Å {text_part} —Å—Ç–∞—Ç—É—Å–æ–º?</b>"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'accounts_delete_by_status_confirm:{status_key}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='accounts_list_all')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_settings_menu():
    settings = storage_manager.load_settings()
    proxies_count = len(settings.get('proxies', []))
    blacklist_count = len(settings.get('blacklist', []))
    text = (
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã <b>–≥–ª–æ–±–∞–ª—å–Ω—ã–µ</b> –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á.\n\n"
        f"üåê <b>–ü—Ä–æ–∫—Å–∏ –≤ –±–∞–∑–µ:</b> {proxies_count}\n"
        f"üö´ <b>–ß–∞—Ç–æ–≤ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b> {blacklist_count}"
    )
    keyboard = [
        [InlineKeyboardButton("üåê –ü—Ä–æ–∫—Å–∏", callback_data='proxy_menu')],
        [InlineKeyboardButton("üö´ –û—á–∏—Å—Ç–∏—Ç—å –ß–°", callback_data='clear_file:blacklist')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_proxy_menu():
    proxies = storage_manager.load_settings().get('proxies', [])
    text = f"–í –±–∞–∑–µ {len(proxies)} –ø—Ä–æ–∫—Å–∏.\n–§–æ—Ä–º–∞—Ç: <code>host:port:user:pass</code>"
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å (—Ç–µ–∫—Å—Ç–æ–º)", callback_data='proxy_add_text')],
        [InlineKeyboardButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (.txt)", callback_data='proxy_add_file')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data='proxy_list_page:1')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏", callback_data='proxy_clear_all')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_settings')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_proxy_list_menu(proxies, page=1, checked_proxies=None):
    total_proxies = len(proxies)
    text = f"<b>–í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {total_proxies}</b>\n"
    if checked_proxies is None:
        checked_proxies = {}
    if not proxies:
        return "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç.", InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='proxy_menu')]
        ])
    total_pages = (total_proxies + PROXIES_PER_PAGE - 1) // PROXIES_PER_PAGE
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * PROXIES_PER_PAGE
    end_index = start_index + PROXIES_PER_PAGE
    proxies_on_page = proxies[start_index:end_index]
    keyboard = []
    for i, proxy_str in enumerate(proxies_on_page):
        current_index = start_index + i
        status_info = ""
        if proxy_str in checked_proxies:
            status = checked_proxies[proxy_str]['status']
            country = checked_proxies[proxy_str]['country']
            if status == 'working':
                status_info = f"‚úÖ {country}"
            else:
                status_info = "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        keyboard.append([
            InlineKeyboardButton(f"{proxy_str}", callback_data='none'),
            InlineKeyboardButton(f"{status_info}", callback_data='none'),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f'proxy_delete:{current_index}')
        ])
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'proxy_list_page:{page-1}'))
    pagination_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data='none'))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'proxy_list_page:{page+1}'))
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    action_buttons = [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data='proxy_check_all')]
    if checked_proxies:
        action_buttons.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–µ", callback_data='proxy_delete_nonworking'))
    keyboard.append(action_buttons)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='proxy_menu')])
    return text, InlineKeyboardMarkup(keyboard)

def get_proxy_check_running_menu():
    text = "üîé <b>–ü—Ä–æ–∫—Å–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    keyboard = [[InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data='proxy_check_stop')]]
    return text, InlineKeyboardMarkup(keyboard)


def get_tasks_menu():
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏."
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data='tasks_create')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data='tasks_list')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_main')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_task_list_menu(tasks, active_task_names):
    if not tasks:
        return "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", callback_data='tasks_create')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_tasks')]
        ])

    text = "<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    keyboard = []
    for name, data in sorted(tasks.items()):
        status = 'running' if name in active_task_names else data.get('status', 'stopped')
        emoji = TASK_STATUS_EMOJI.get(status, '‚ùì')
        keyboard.append([InlineKeyboardButton(f"{emoji} {name}", callback_data=f'task_manage:{name}')])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu_tasks')])
    return text, InlineKeyboardMarkup(keyboard)

def get_task_manage_menu(task_name, task_data, is_running):
    status = 'running' if is_running else task_data.get('status', 'stopped')
    emoji = TASK_STATUS_EMOJI.get(status, '‚ùì')
    task_type = task_data.get('type')
    task_type_name = TASK_TYPE_NAMES.get(task_type, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    accounts_count = len(task_data.get('accounts', []))
    has_report = bool(task_data.get('report'))

    text = (f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π:</b> <code>{html.escape(task_name)}</code>\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {status.capitalize()}\n"
            f"<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {task_type_name}\n"
            f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> {accounts_count}")

    keyboard = []
    if is_running:
        keyboard.append([
            InlineKeyboardButton("üìù –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç", callback_data=f'task_report:{task_name}'),
            InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'task_stop:{task_name}')
        ])
    else:
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'task_start:{task_name}')])
        
        keyboard.append([
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏", callback_data=f'task_settings_menu:{task_name}'),
            InlineKeyboardButton("üóÇ –§–∞–π–ª—ã –∑–∞–¥–∞—á–∏", callback_data=f'task_files_menu:{task_name}')
        ])

        keyboard.append([
            InlineKeyboardButton("üë• –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data=f'task_accounts:{task_name}:1'),
            InlineKeyboardButton("üéØ –î–µ–π—Å—Ç–≤–∏–µ", callback_data=f'task_action:{task_name}')
        ])

        action_row = []
        if has_report:
            action_row.append(InlineKeyboardButton("üìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=f'task_show_saved_report:{task_name}'))
        action_row.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'task_delete_prompt:{task_name}'))
        keyboard.append(action_row)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='tasks_list')])
    return text, InlineKeyboardMarkup(keyboard)

def get_task_settings_menu(task_name, task_settings):
    interval = task_settings.get('broadcast_interval', ['N/A', 'N/A'])
    fwd_link_safe = html.escape(task_settings.get('forward_post_link', '–ù–µ –∑–∞–¥–∞–Ω–∞'))
    target_map = {'chats': '–¢–æ–ª—å–∫–æ —á–∞—Ç—ã', 'comments': '–¢–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 'both': '–ß–∞—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'}
    current_target = target_map.get(task_settings.get('broadcast_target'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    workers_limit = task_settings.get('concurrent_workers', 5)
    password = task_settings.get('two_fa_password', '')
    password_display = f'<code>{html.escape(password)}</code>' if password else '–Ω–µ –∑–∞–¥–∞–Ω'
    
    reply_in_pm_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if task_settings.get('reply_in_pm') else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    reply_in_pm_button_text = "ü§ñ –û—Ç–≤–µ—á–∞—Ç—å –≤ –õ–°"

    text = (f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏:</b> <code>{html.escape(task_name)}</code>\n\n"
            f"ü§ñ <b>–û—Ç–≤–µ—á–∞—Ç—å –≤ –õ–°:</b> {reply_in_pm_status}\n"
            f"üîë <b>–ü–∞—Ä–æ–ª—å 2FA:</b> {password_display}\n"
            f"üöÄ <b>–õ–∏–º–∏—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤:</b> {workers_limit} –∞–∫–∫.\n"
            f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> –û—Ç {interval[0]} –¥–æ {interval[1]} —Å–µ–∫.\n"
            f"üîó <b>–ü–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:</b> <code>{fwd_link_safe}</code>\n"
            f"üéØ <b>–¶–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {current_target}")
    keyboard = [
        [InlineKeyboardButton(reply_in_pm_button_text, callback_data=f'task_toggle_setting:reply_in_pm:{task_name}')],
        [InlineKeyboardButton("üîë –ü–∞—Ä–æ–ª—å 2FA", callback_data=f'task_set:2fa_password:{task_name}')],
        [InlineKeyboardButton("üöÄ –õ–∏–º–∏—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤", callback_data=f'task_set:workers:{task_name}')],
        [InlineKeyboardButton("‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f'task_set:interval:{task_name}'),
         InlineKeyboardButton("üéØ –ö—É–¥–∞ –ø–∏—Å–∞—Ç—å", callback_data=f'task_set_target_menu:{task_name}')],
        [InlineKeyboardButton("üîó –ü–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏", callback_data=f'task_set:fwd_post:{task_name}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_task_broadcast_target_menu(task_name, current_target):
    def button_text(target, text):
        return f"‚úÖ {text}" if current_target == target else text
    keyboard = [
        [InlineKeyboardButton(button_text('chats', "–¢–æ–ª—å–∫–æ –ø–æ —á–∞—Ç–∞–º"), callback_data=f'task_set_target:chats:{task_name}')],
        [InlineKeyboardButton(button_text('comments', "–¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º"), callback_data=f'task_set_target:comments:{task_name}')],
        [InlineKeyboardButton(button_text('both', "–ü–æ —á–∞—Ç–∞–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º"), callback_data=f'task_set_target:both:{task_name}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_settings_menu:{task_name}')]
    ]
    return f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ `{html.escape(task_name)}`:", InlineKeyboardMarkup(keyboard)

def get_task_files_menu(task_name):
    stats = storage_manager.get_task_stats(task_name)
    text = (f"<b>–§–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞—á–∏:</b> <code>{html.escape(task_name)}</code>\n\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {stats.get('messages', 0)}\n"
            f"ü§ñ –û—Ç–≤–µ—Ç—ã –≤ –õ–°: {stats.get('pm_replies', 0)}\n"
            f"üë• –ß–∞—Ç—ã: {stats.get('chats', 0)}\n"
            f"--- –ü—Ä–æ—Ñ–∏–ª–∏ ---\n"
            f"üë§ –ò–º–µ–Ω–∞: {stats.get('names', 0)}\n"
            f"üìú –§–∞–º–∏–ª–∏–∏: {stats.get('lastnames', 0)}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {stats.get('bios', 0)}\n"
            f"üñº –ê–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {stats.get('avatars', 0)}\n"
            f"--- –°–ø–∞–º ---\n"
            f"üéØ –¶–µ–ª–∏ —Å–ø–∞–º–∞: {stats.get('spam_targets', 0)}\n"
            f"üîó –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {stats.get('forward_messages', 0)}\n"
            f"üòÑ –°—Ç–∏–∫–µ—Ä—ã: {stats.get('stickers', 0)}\n"
            f"--- –ö–∞–Ω–∞–ª—ã ---\n"
            f"üìù –ò–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('channel_names', 0)}\n"
            f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {stats.get('channel_descriptions', 0)}\n"
            f"üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('channel_avatars', 0)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∏:")
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'task_upload:messages:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:messages:{task_name}')],
        [InlineKeyboardButton("ü§ñ –û—Ç–≤–µ—Ç—ã –≤ –õ–°", callback_data=f'task_upload:pm_replies:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:pm_replies:{task_name}')],
        [InlineKeyboardButton("üë• –ß–∞—Ç—ã", callback_data=f'task_upload:chats:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:chats:{task_name}')],
        [InlineKeyboardButton("üë§ –ò–º–µ–Ω–∞", callback_data=f'task_upload:names:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:names:{task_name}')],
        [InlineKeyboardButton("üìú –§–∞–º–∏–ª–∏–∏", callback_data=f'task_upload:lastnames:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:lastnames:{task_name}')],
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data=f'task_upload:bios:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:bios:{task_name}')],
        [InlineKeyboardButton("üñº –ê–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π", callback_data=f'task_upload:avatars:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:avatars:{task_name}')],
        [InlineKeyboardButton("üéØ –¶–µ–ª–∏ —Å–ø–∞–º–∞", callback_data=f'task_upload:spam_targets:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:spam_targets:{task_name}')],
        [InlineKeyboardButton("üîó –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f'task_upload:forward_messages:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:forward_messages:{task_name}')],
        [InlineKeyboardButton("üòÑ –°—Ç–∏–∫–µ—Ä—ã", callback_data=f'task_upload:stickers:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:stickers:{task_name}')],
        [InlineKeyboardButton("üìù –ò–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤", callback_data=f'task_upload:channel_names:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:channel_names:{task_name}')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤", callback_data=f'task_upload:channel_descriptions:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:channel_descriptions:{task_name}')],
        [InlineKeyboardButton("üñºÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤", callback_data=f'task_upload:channel_avatars:{task_name}'), InlineKeyboardButton("üóëÔ∏è", callback_data=f'task_clear:channel_avatars:{task_name}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_task_action_menu(task_name):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∞ –∑–∞–¥–∞—á–∞:"
    keyboard = []
    row = []
    for type_key, name in TASK_TYPE_NAMES.items():
        row.append(InlineKeyboardButton(name, callback_data=f'task_set_action:{task_name}:{type_key}'))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')])
    return text, InlineKeyboardMarkup(keyboard)

def get_task_accounts_menu(task_name, task_data, all_accounts, all_statuses, globally_assigned_accounts, page=1, filter_by_valid_status=False):
    assigned_to_this_task = set(task_data.get('accounts', []))
    
    available_accounts = [acc for acc in all_accounts if acc not in globally_assigned_accounts]
    
    if filter_by_valid_status:
        final_list = [acc for acc in available_accounts if all_statuses.get(acc) == 'valid']
        prompt = "–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ <b>—Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –≤–∞–ª–∏–¥–Ω—ã–µ (‚úÖ)</b> –∞–∫–∫–∞—É–Ω—Ç—ã."
    else:
        final_list = available_accounts
        prompt = "–ê–∫–∫–∞—É–Ω—Ç—ã, –∑–∞–Ω—è—Ç—ã–µ –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö, —Å–∫—Ä—ã—Ç—ã."

    if not final_list:
        return "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.", InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')]
        ])

    text = f"<b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ:</b> <code>{html.escape(task_name)}</code>\n{prompt}"
    
    total_pages = (len(final_list) + ACCOUNTS_PER_PAGE - 1) // ACCOUNTS_PER_PAGE
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * ACCOUNTS_PER_PAGE
    end_index = start_index + ACCOUNTS_PER_PAGE
    accounts_on_page = final_list[start_index:end_index]

    keyboard = []
    for acc_name in accounts_on_page:
        is_assigned = acc_name in assigned_to_this_task
        status_key = all_statuses.get(acc_name, 'unknown')
        status_emoji = ACCOUNT_STATUS_EMOJI.get(status_key, '‚ùî')
        toggle_emoji = "‚úÖ" if is_assigned else "‚ûï"
        
        callback = f'task_toggle_account:{acc_name}:{page}'
        keyboard.append([InlineKeyboardButton(f"{toggle_emoji} {status_emoji} {acc_name}", callback_data=callback)])

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'task_accounts:{task_name}:{page-1}'))
    pagination_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data='none'))
    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'task_accounts:{task_name}:{page+1}'))
    
    keyboard.append([
        InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö", callback_data=f'task_toggle_all:select'),
        InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data=f'task_toggle_all:deselect')
    ])
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
        
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')])
    return text, InlineKeyboardMarkup(keyboard)

def get_task_delete_confirmation_menu(task_name):
    text = f"‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É <code>{html.escape(task_name)}</code>?</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'task_delete_confirm:{task_name}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥", callback_data=f'task_manage:{task_name}')]
    ]
    return text, InlineKeyboardMarkup(keyboard)

def get_back_button(callback_data='menu_main'):
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]])

def get_close_keyboard():
    keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close_message')]]
    return InlineKeyboardMarkup(keyboard)

def get_task_completion_keyboard(task_name):
    keyboard = [[
        InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data=f'task_show_saved_report:{task_name}'),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close_message')
    ]]
    return InlineKeyboardMarkup(keyboard)