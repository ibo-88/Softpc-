# safety_manager.py

import asyncio
import random
import time
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import storage_manager

class SafetyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.account_activity = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.proxy_usage = {}       # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        self.spam_statistics = {}   # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.blocked_accounts = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        
    def get_safe_delay(self, task_type: str, account_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        base_delays = {
            'spam_dm': (120, 300),      # 2-5 –º–∏–Ω—É—Ç –¥–ª—è –õ–°
            'spam_dm_existing': (90, 180),  # 1.5-3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –õ–°
            'spam_chats': (30, 90),     # 30-90 —Å–µ–∫ –¥–ª—è —á–∞—Ç–æ–≤
            'spam_channels': (45, 120), # 45-120 —Å–µ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            'spam_both': (30, 90),      # 30-90 —Å–µ–∫ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ
            'join_chats': (20, 60),     # 20-60 —Å–µ–∫ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
            'create_channel': (60, 180), # 1-3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        }
        
        min_delay, max_delay = base_delays.get(task_type, (30, 90))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ
        if account_name in self.account_activity:
            last_activity = self.account_activity[account_name]
            time_since_last = time.time() - last_activity
            
            if time_since_last < 300:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                min_delay = int(min_delay * 1.5)
                max_delay = int(max_delay * 1.5)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        spam_count = self.spam_statistics.get(account_name, {}).get('today_count', 0)
        if spam_count > 50:  # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è
            min_delay = int(min_delay * 2)
            max_delay = int(max_delay * 2)
        
        return random.randint(min_delay, max_delay)
    
    def record_activity(self, account_name: str, activity_type: str, success: bool = True):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        current_time = time.time()
        today = datetime.now().date()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.account_activity[account_name] = current_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞
        if account_name not in self.spam_statistics:
            self.spam_statistics[account_name] = {
                'today_count': 0,
                'last_reset': today,
                'total_sent': 0,
                'errors_count': 0,
                'last_error': None
            }
        
        stats = self.spam_statistics[account_name]
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if stats['last_reset'] != today:
            stats['today_count'] = 0
            stats['last_reset'] = today
        
        if success:
            stats['today_count'] += 1
            stats['total_sent'] += 1
        else:
            stats['errors_count'] += 1
            stats['last_error'] = current_time
    
    def is_account_safe_to_use(self, account_name: str, task_type: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if account_name in self.blocked_accounts:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ"
        
        if account_name not in self.spam_statistics:
            return True, "–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"
        
        stats = self.spam_statistics[account_name]
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        daily_limits = {
            'spam_dm': 20,          # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è –õ–°
            'spam_dm_existing': 30, # –ß—É—Ç—å –≤—ã—à–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –õ–°
            'spam_chats': 100,      # –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç –¥–ª—è —á–∞—Ç–æ–≤
            'spam_channels': 80,    # –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            'spam_both': 100,       # –°—Ä–µ–¥–Ω–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ
        }
        
        limit = daily_limits.get(task_type, 50)
        
        if stats['today_count'] >= limit:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({stats['today_count']}/{limit})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if stats['errors_count'] > 5:
            if stats['last_error'] and (time.time() - stats['last_error']) < 3600:  # –û—à–∏–±–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                return False, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if account_name in self.account_activity:
            last_activity = self.account_activity[account_name]
            if (time.time() - last_activity) < 60:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
                return False, "–ê–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –Ω–µ–¥–∞–≤–Ω–æ"
        
        return True, "–ë–µ–∑–æ–ø–∞—Å–Ω–æ"
    
    def get_recommended_settings(self, task_type: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recommendations = {
            'spam_dm': {
                'max_workers': 1,
                'delay_min': 120,
                'delay_max': 300,
                'daily_limit': 20,
                'warning': "üö® –í–´–°–û–ö–ò–ô –†–ò–°–ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–∞—Å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã!"
            },
            'spam_dm_existing': {
                'max_workers': 2,
                'delay_min': 90,
                'delay_max': 180,
                'daily_limit': 30,
                'warning': "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏."
            },
            'spam_chats': {
                'max_workers': 3,
                'delay_min': 30,
                'delay_max': 90,
                'daily_limit': 100,
                'warning': "‚úÖ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤."
            },
            'spam_channels': {
                'max_workers': 3,
                'delay_min': 45,
                'delay_max': 120,
                'daily_limit': 80,
                'warning': "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."
            },
            'spam_both': {
                'max_workers': 3,
                'delay_min': 30,
                'delay_max': 90,
                'daily_limit': 100,
                'warning': "‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏."
            }
        }
        
        return recommendations.get(task_type, {
            'max_workers': 5,
            'delay_min': 30,
            'delay_max': 90,
            'daily_limit': 50,
            'warning': "‚ÑπÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        })
    
    def mark_account_blocked(self, account_name: str, reason: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"""
        self.blocked_accounts.add(account_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        statuses = storage_manager.load_account_statuses()
        if 'spamblock' in reason.lower():
            statuses[account_name] = 'spamblock_temporary' if 'temporary' in reason.lower() else 'spamblock_permanent'
        elif 'frozen' in reason.lower() or 'tos' in reason.lower():
            statuses[account_name] = 'frozen'
        else:
            statuses[account_name] = 'invalid'
        
        storage_manager.save_account_statuses(statuses)
    
    def get_proxy_distribution(self, accounts: List[str], accounts_per_proxy: int = 3) -> Dict:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–∫—Å–∏"""
        settings = storage_manager.load_settings()
        proxies = settings.get('proxies', [])
        
        if not proxies:
            return {}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
        proxy_statuses = settings.get('proxy_statuses', {})
        working_proxies = [p for p in proxies if proxy_statuses.get(p, {}).get('status') == 'working']
        
        if not working_proxies:
            working_proxies = proxies  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        
        distribution = {}
        proxy_index = 0
        
        for i, account in enumerate(accounts):
            if i % accounts_per_proxy == 0:
                proxy_index = (proxy_index + 1) % len(working_proxies)
            
            proxy = working_proxies[proxy_index]
            if proxy not in distribution:
                distribution[proxy] = []
            distribution[proxy].append(account)
        
        return distribution
    
    def validate_task_safety(self, task_name: str, task_data: Dict) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        task_type = task_data.get('type', '')
        accounts = task_data.get('accounts', [])
        settings = task_data.get('settings', {})
        
        if not accounts:
            return False, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
        unsafe_accounts = []
        for account in accounts:
            is_safe, reason = self.is_account_safe_to_use(account, task_type)
            if not is_safe:
                unsafe_accounts.append(f"{account}: {reason}")
        
        if unsafe_accounts:
            return False, f"–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n" + "\n".join(unsafe_accounts[:5])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏
        recommendations = self.get_recommended_settings(task_type)
        
        workers = settings.get('concurrent_workers', 5)
        if workers > recommendations.get('max_workers', 5):
            return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ ({workers}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommendations['max_workers']}"
        
        interval = settings.get('broadcast_interval', [30, 90])
        if len(interval) >= 2:
            if interval[0] < recommendations.get('delay_min', 30):
                return False, f"–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ({interval[0]}—Å). –ú–∏–Ω–∏–º—É–º: {recommendations['delay_min']}—Å"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ø–∞–º–∞ –ø–æ –õ–°
        if task_type in ['spam_dm', 'spam_dm_existing']:
            if not settings.get('dm_spam_warning_accepted', False):
                return False, "–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö —Å–ø–∞–º–∞ –ø–æ –õ–°"
        
        return True, "–ó–∞–¥–∞—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
_safety_manager = None

def get_safety_manager() -> SafetyManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ SafetyManager"""
    global _safety_manager
    if _safety_manager is None:
        _safety_manager = SafetyManager()
    return _safety_manager