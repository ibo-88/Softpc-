# account_tester.py

import asyncio
import os
import json
from typing import Dict, List, Optional, Callable
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, AuthKeyUnregisteredError, UserDeactivatedBanError
import storage_manager

class AccountTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    
    def __init__(self, progress_callback: Optional[Callable] = None):
        self.progress_callback = progress_callback
    
    async def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å callback"""
        if self.progress_callback:
            await self.progress_callback(message)
        else:
            print(message)
    
    async def test_single_account(self, session_name: str, use_proxy: bool = True) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        result = {
            'session_name': session_name,
            'success': False,
            'error': None,
            'user_info': None,
            'proxy_used': None,
            'connection_time': 0
        }
        
        start_time = asyncio.get_event_loop().time()
        client = None
        
        try:
            await self.log(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–∫–∫–∞—É–Ω—Ç: {session_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = storage_manager.get_account_info(session_name)
            
            if not account_info['has_session']:
                result['error'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏"
                return result
            
            if not account_info['json_valid']:
                result['error'] = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {account_info['json_error']}"
                return result
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ JSON
            json_path = os.path.join(storage_manager.SESSIONS_DIR, f"{session_name}.json")
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            api_id = data.get('api_id') or data.get('app_id')
            api_hash = data.get('api_hash') or data.get('app_hash')
            two_fa = data.get('twoFA')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy_dict = None
            if use_proxy:
                settings = storage_manager.load_settings()
                proxies = settings.get('proxies', [])
                if proxies:
                    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏
                    import random
                    proxy_str = random.choice(proxies)
                    p = proxy_str.split(':')
                    if len(p) == 4:
                        proxy_dict = {
                            'proxy_type': 'socks5',
                            'addr': p[0],
                            'port': int(p[1]),
                            'username': p[2],
                            'password': p[3]
                        }
                        result['proxy_used'] = f"{p[0]}:{p[1]}"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_model = data.get('device_model') or data.get('device') or 'PC'
            system_version = data.get('system_version') or data.get('sdk') or 'Windows 10'
            app_version = data.get('app_version', '4.8.1 x64')
            lang_code = data.get('lang_code') or 'en'
            system_lang_code = data.get('system_lang_code') or 'en-US'
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = TelegramClient(
                os.path.join(storage_manager.SESSIONS_DIR, session_name),
                int(api_id),
                api_hash,
                device_model=device_model,
                system_version=system_version,
                app_version=app_version,
                lang_code=lang_code,
                system_lang_code=system_lang_code,
                proxy=proxy_dict,
                timeout=15,
                catch_up=False
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await client.is_user_authorized():
                if two_fa:
                    await client.sign_in(password=two_fa)
                else:
                    result['error'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å"
                    return result
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            result['user_info'] = {
                'id': me.id,
                'first_name': me.first_name or '',
                'last_name': me.last_name or '',
                'username': me.username or '',
                'phone': me.phone or '',
                'is_verified': me.verified,
                'is_premium': getattr(me, 'premium', False)
            }
            
            result['success'] = True
            result['connection_time'] = round(asyncio.get_event_loop().time() - start_time, 2)
            
            await self.log(f"‚úÖ {session_name}: –£—Å–ø–µ—à–Ω–æ ({result['connection_time']}—Å)")
            
        except (UserDeactivatedBanError, AuthKeyUnregisteredError):
            result['error'] = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω"
            await self.log(f"‚ùå {session_name}: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω")
        except SessionPasswordNeededError:
            result['error'] = "–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å"
            await self.log(f"‚ö†Ô∏è {session_name}: –ù—É–∂–µ–Ω 2FA")
        except (asyncio.TimeoutError, OSError):
            result['error'] = "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏?)"
            await self.log(f"‚è∞ {session_name}: –¢–∞–π–º–∞—É—Ç")
        except Exception as e:
            result['error'] = f"–û—à–∏–±–∫–∞: {type(e).__name__}: {e}"
            await self.log(f"‚ùå {session_name}: {result['error']}")
        finally:
            if client and client.is_connected():
                await client.disconnect()
        
        return result
    
    async def test_multiple_accounts(self, session_names: List[str], use_proxy: bool = True, 
                                   max_concurrent: int = 5) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        await self.log(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(session_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def test_with_semaphore(session_name):
            async with semaphore:
                return await self.test_single_account(session_name, use_proxy)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [test_with_semaphore(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        final_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                final_results.append({
                    'session_name': session_names[i],
                    'success': False,
                    'error': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {result}",
                    'user_info': None,
                    'proxy_used': None,
                    'connection_time': 0
                })
            else:
                final_results.append(result)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in final_results if r['success'])
        failed = len(final_results) - successful
        
        await self.log(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
        
        return final_results
    
    async def test_proxy_connection(self, proxy_str: str, test_account: str = None) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        result = {
            'proxy': proxy_str,
            'success': False,
            'error': None,
            'response_time': 0
        }
        
        try:
            p = proxy_str.split(':')
            if len(p) != 4:
                result['error'] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏"
                return result
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
            import aiohttp
            from aiohttp_proxy import ProxyConnector
            
            start_time = asyncio.get_event_loop().time()
            
            connector = ProxyConnector.from_url(f'socks5://{p[2]}:{p[3]}@{p[0]}:{p[1]}')
            async with aiohttp.ClientSession(connector=connector) as session:
                async with session.get('http://httpbin.org/ip', timeout=10) as response:
                    if response.status == 200:
                        result['success'] = True
                        result['response_time'] = round(asyncio.get_event_loop().time() - start_time, 2)
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Telegram
                        if test_account:
                            await self.log(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–∫—Å–∏ {p[0]}:{p[1]} —á–µ—Ä–µ–∑ Telegram...")
                            telegram_result = await self.test_single_account(test_account, use_proxy=True)
                            if not telegram_result['success']:
                                result['success'] = False
                                result['error'] = f"–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ —Å Telegram: {telegram_result['error']}"
                    else:
                        result['error'] = f"HTTP {response.status}"
        
        except asyncio.TimeoutError:
            result['error'] = "–¢–∞–π–º–∞—É—Ç"
        except Exception as e:
            result['error'] = f"{type(e).__name__}: {e}"
        
        return result

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
async def test_account_connection(session_name: str, progress_callback=None) -> Dict:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    tester = AccountTester(progress_callback)
    return await tester.test_single_account(session_name)

async def test_all_accounts(progress_callback=None) -> List[Dict]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    accounts = storage_manager.list_accounts()
    if not accounts:
        if progress_callback:
            await progress_callback("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return []
    
    tester = AccountTester(progress_callback)
    return await tester.test_multiple_accounts(accounts)